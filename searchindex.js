Search.setIndex({"titles": ["Using Kenning via command line arguments", "Deep Learning deployment stack", "Displaying information about available classes", "Evaluating models on hardware using Kenning Zephyr Runtime", "Visualizing Kenning data flows with Pipeline Manager", "Bare-metal IREE runtime simulated using Renode", "Structured pruning for PyTorch models", "Model quantization and compilation using TFLite and TVM", "Unstructured Pruning of TensorFlow Models", "Kenning", "Introduction", "Defining optimization pipelines in Kenning", "Kenning API", "Developing Kenning blocks", "Creating applications with Kenning", "Kenning gallery of use cases", "Kenning measurements", "Kenning resources", "Kenning environment variables", "Choosing optimal optimization pipeline", "Kenning", "Sample autogenerated report"], "terms": {"provid": [0, 1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 19, 20], "sever": [0, 2, 7, 13, 20], "script": [0, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 19], "compil": [0, 3, 5, 9, 10, 12, 13, 15, 16, 17, 20], "benchmark": [0, 4, 12, 19, 20, 21], "deep": [0, 9, 10, 12, 20], "learn": [0, 7, 9, 10, 12, 20], "variou": [0, 1, 7, 10, 11, 12, 13, 14, 17, 20], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19, 20, 21], "execut": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 19, 20], "ar": [0, 1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20], "present": [0, 6, 7, 8, 12, 13, 14], "scenario": [0, 1, 2, 3, 4, 6, 7, 10, 11, 13, 14, 16, 19, 20], "modul": [0, 2, 3, 5, 7, 11, 12, 13, 14, 16], "sampl": [0, 1, 4, 6, 9, 10, 12, 13, 14, 20], "bash": 0, "locat": [0, 1, 5, 11, 12, 17, 21], "directori": [0, 3, 7, 11, 12, 13, 17, 18, 20], "repositori": [0, 3, 5, 12, 17], "runnabl": 0, "requir": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 17, 18, 20], "implement": [0, 1, 4, 7, 9, 11, 12, 17], "from": [0, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 17, 18, 19, 20], "core": [0, 7, 11, 12, 16, 20], "action": [0, 1, 11, 12, 14, 21], "To": [0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 17, 20], "below": [0, 2, 4, 6, 8, 11, 13, 17], "exampl": [0, 2, 4, 6, 7, 8, 11, 12, 13, 15, 17, 19, 20], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 16, 17, 18, 19, 20, 21], "instal": [0, 2, 5, 6, 7, 8, 9, 10, 11, 13, 17, 18], "depend": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 18, 19, 20], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 20, 21], "pip": [0, 2, 3, 4, 6, 7, 8, 11, 13, 17], "tensorflow": [0, 2, 3, 9, 11, 12, 13, 15, 20], "tvm": [0, 2, 3, 9, 11, 12, 13, 15, 19, 20], "git": [0, 2, 3, 4, 6, 7, 8, 11, 13, 17, 20], "http": [0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 17, 20], "github": [0, 2, 3, 4, 6, 7, 8, 11, 12, 13, 17, 20, 21], "com": [0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 17, 20], "antmicro": [0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 17, 20], "each": [0, 1, 2, 4, 7, 11, 12, 13, 14, 17, 18, 19, 20], "dataset": [0, 2, 5, 6, 7, 8, 9, 10, 11, 13, 16, 17, 18, 19, 20], "modelwrapp": [0, 2, 5, 6, 7, 8, 9, 11, 13, 14, 19, 20, 21], "optim": [0, 2, 3, 4, 5, 6, 8, 9, 10, 13, 14, 16, 20, 21], "other": [0, 1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 18, 20], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 20], "configur": [0, 2, 4, 5, 6, 7, 11, 12, 13, 14, 19, 20], "work": [0, 4, 5, 7, 10, 12, 13, 16], "an": [0, 1, 2, 4, 5, 6, 8, 10, 11, 12, 13, 14, 17, 20], "object": [0, 1, 7, 11, 12, 13, 14, 20], "given": [0, 1, 7, 12, 13, 14, 20], "form_argpars": [0, 12, 13, 20], "from_argpars": [0, 12, 13, 20], "method": [0, 6, 7, 8, 11, 12, 14, 16, 17, 20], "former": [0, 20], "creat": [0, 2, 3, 4, 7, 9, 10, 11, 12, 13, 17, 20], "argpars": [0, 12, 13], "group": [0, 2, 6, 8, 12, 13, 20], "its": [0, 4, 5, 7, 9, 10, 12, 14, 20], "paramet": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 19, 20, 21], "latter": [0, 11, 14, 20], "take": [0, 7, 8, 11, 12, 17, 20], "pars": [0, 5, 11, 12, 13, 14, 17, 20], "return": [0, 2, 4, 11, 12, 13, 14, 17, 20], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21], "featur": [0, 1, 5, 20], "addit": [0, 1, 3, 5, 6, 7, 8, 11, 12, 13, 14, 20], "properli": [0, 1], "which": [0, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 20], "done": [0, 2, 11, 12, 17, 18], "complet": [0, 3, 12, 20], "option": [0, 4, 5, 6, 11, 12, 13, 14, 17, 18, 19, 20], "describ": [0, 1, 4, 10, 12, 13, 14, 16, 19, 20], "argcomplet": 0, "document": [0, 3, 4, 7, 10, 13, 14, 20], "model_train": [0, 20], "": [0, 1, 2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 18, 19, 20, 21], "get": [0, 7, 11, 12, 13, 14, 20], "list": [0, 1, 3, 7, 11, 12, 13, 14, 16, 17, 19, 20], "select": [0, 1, 5, 19, 20], "e": [0, 1, 5, 6, 7, 11, 12, 13, 14, 17, 20], "tensorflowpetdatasetmobilenetv2": [0, 2, 7, 8, 11, 12, 13, 19, 20, 21], "petdataset": [0, 2, 6, 7, 8, 11, 12, 13, 19, 20, 21], "cl": [0, 7, 13, 21], "classif": [0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 17, 19, 20], "tensorflow_pet_dataset": [0, 2, 7, 8, 11, 12, 13, 19, 20, 21], "pet_dataset": [0, 2, 6, 7, 8, 11, 13, 19, 20, 21], "h": [0, 20], "possibl": [0, 1, 7, 11, 12, 13, 17, 19, 20], "For": [0, 2, 4, 5, 6, 7, 8, 11, 12, 13, 17, 18, 19, 20], "abov": [0, 2, 3, 6, 7, 11, 12, 13, 14, 17, 20], "call": [0, 1, 7, 12, 13], "output": [0, 1, 2, 5, 6, 7, 8, 9, 11, 12, 14, 17, 20], "common": [0, 1, 11, 12, 13, 16], "help": [0, 4, 13], "show": [0, 1, 5, 12, 14], "messag": [0, 2, 12], "exit": [0, 12], "verbos": [0, 2, 3, 4, 5, 11, 18, 20, 21], "debug": [0, 5, 18], "info": [0, 3, 5, 11, 20, 21], "warn": [0, 2], "error": [0, 4, 11, 12, 13], "critic": 0, "level": [0, 12, 13, 21], "modelwrapper_cl": 0, "base": [0, 1, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 19, 20, 21], "import": [0, 2, 12, 13, 17, 20], "dataset_cl": 0, "batch": [0, 6, 7, 8, 11, 12, 21], "size": [0, 6, 7, 8, 11, 12, 14, 17, 21], "batch_siz": [0, 8, 11, 12], "rate": [0, 1, 7, 12], "learning_r": [0, 12], "num": [0, 7], "epoch": [0, 1, 6, 7, 8, 12], "num_epoch": 0, "number": [0, 1, 6, 8, 12], "logdir": [0, 7, 12], "path": [0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19, 20, 21], "log": [0, 4, 7, 12, 17, 18], "model_path": [0, 2, 5, 6, 7, 8, 11, 12, 13, 14, 17, 19, 20, 21], "classifi": [0, 5, 11, 12], "speci": [0, 11], "breed": [0, 11, 20, 21], "determin": [0, 11, 12], "should": [0, 1, 3, 7, 11, 12, 13, 14, 17, 19, 20], "imag": [0, 1, 2, 7, 11, 12, 14, 20], "memori": [0, 6, 7, 11, 12, 14, 16], "layout": [0, 11], "nhwc": [0, 11, 19, 21], "nchw": [0, 6, 7, 11, 14, 19, 20], "deliv": [0, 11, 12, 13, 14], "format": [0, 2, 5, 6, 7, 11, 12, 13, 14, 16, 17, 19, 20], "root": [0, 7, 11, 12, 20, 21], "dataset_root": [0, 5, 6, 7, 8, 11, 13, 19, 20, 21], "inference_batch_s": [0, 21], "input": [0, 1, 2, 5, 6, 7, 11, 12, 14, 17, 20, 21], "data": [0, 1, 5, 8, 9, 10, 11, 13, 14, 15, 18, 20], "download": [0, 3, 5, 7, 11, 12, 14, 17, 18, 20], "befor": [0, 1, 7, 8, 11, 12, 13, 17, 18], "ani": [0, 1, 2, 4, 8, 11, 12, 13, 14, 17, 20], "If": [0, 1, 11, 12, 13, 14, 17, 18, 20], "file": [0, 2, 3, 4, 5, 7, 11, 12, 13, 14, 17, 19, 20], "alreadi": [0, 7, 12, 17], "checksum": [0, 12], "correct": 0, "thei": [0, 2, 8, 11, 12, 14, 16, 18, 20], "again": [0, 7], "enabl": [0, 5, 6, 12, 18], "default": [0, 2, 4, 6, 7, 8, 11, 12, 13, 17, 18, 19, 20, 21], "forc": [0, 12], "extern": [0, 12], "calibr": [0, 1, 7, 12, 13], "external_calibration_dataset": [0, 12, 21], "split": [0, 1, 12, 17], "fraction": [0, 12], "split_fraction_test": [0, 12, 21], "leav": [0, 12], "val": 0, "split_fraction_v": [0, 12, 21], "valdiat": 0, "seed": [0, 12], "split_se": [0, 12, 21], "At": 0, "end": [0, 1, 12, 13, 20], "build": [0, 5, 6, 7, 8, 9, 11, 13, 19, 20], "pet": [0, 7, 9, 12, 13, 19, 20], "h5": [0, 5, 7, 8, 11, 12, 13, 17, 19, 20, 21], "32": [0, 7, 8], "0": [0, 2, 4, 5, 6, 7, 8, 11, 12, 13, 17, 19, 20, 21], "0001": [0, 7], "50": [0, 7, 17, 21], "save": [0, 1, 3, 4, 7, 11, 12, 13, 14, 17, 20, 21], "inference_perform": 0, "wa": [0, 12, 13, 17, 21], "It": [0, 1, 5, 7, 8, 11, 12, 13, 17], "you": [0, 4, 6, 7, 8, 11, 12, 13, 14, 17, 20], "wrap": [0, 12, 13], "applic": [0, 1, 4, 9, 10, 11, 12, 16, 20], "json": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 16, 19, 20], "qualiti": [0, 1, 5, 6, 7, 8, 9, 11, 12, 16, 20], "metric": [0, 1, 5, 6, 7, 9, 11, 12, 19], "gather": [0, 10, 12, 19], "dure": [0, 1, 6, 7, 10, 12, 13, 14, 21], "tensorflow_pet_dataset_mobilenetv2": [0, 7, 8, 11, 13, 19, 20, 21], "load": [0, 4, 5, 7, 11, 12, 13, 20], "all": [0, 2, 5, 7, 8, 12, 13, 16, 17, 19, 20], "collect": [0, 2, 6, 7, 11, 12, 13, 16, 20], "throughout": [0, 20], "store": [0, 4, 5, 7, 8, 12, 14, 16], "later": [0, 1, 5, 11, 12, 13, 19, 20], "render": [0, 7, 12, 20], "inference_test": [0, 11, 20], "inference_serv": [0, 11, 20], "either": [0, 1, 3, 4, 11, 12, 13, 14, 17], "local": [0, 9, 12, 14, 17, 20], "remot": [0, 9, 12, 14, 17], "receiv": [0, 11, 12, 13, 18], "send": [0, 5, 11, 12, 14, 20], "statist": [0, 6, 12], "both": [0, 7, 12, 13, 14], "runtim": [0, 2, 4, 6, 7, 9, 11, 15, 16, 17, 19, 20, 21], "flow": [0, 2, 7, 9, 10, 11, 14, 15, 20], "commun": [0, 5, 11, 12, 20], "protocol": [0, 5, 9, 11, 20], "form": [0, 12, 13, 16, 20], "extract": [0, 12], "o": [0, 5, 9, 11, 14], "process": [0, 1, 5, 6, 7, 8, 10, 11, 13, 14, 16, 20], "convers": [0, 11, 12, 17, 20], "onnx": [0, 2, 12, 14, 20], "fetch": [0, 7, 11, 12], "evalu": [0, 1, 2, 7, 9, 10, 12, 15, 16, 18, 20], "need": [0, 1, 3, 5, 6, 7, 8, 11, 12, 13, 14, 20], "when": [0, 2, 4, 5, 6, 8, 11, 12, 13], "print": [0, 17], "tvmruntim": [0, 2, 11, 12, 19, 20, 21], "tvmcompil": [0, 2, 7, 11, 12, 19, 20, 21], "network": [0, 1, 6, 7, 8, 11, 13, 20], "networkprotocol": [0, 11, 12], "With": [0, 7, 14, 19, 20], "look": [0, 7, 11, 13, 14, 19, 20], "convert": [0, 2, 7, 12, 13, 17, 20], "convert_to_onnx": 0, "here": [0, 1, 7, 8, 11, 12, 13], "pipelin": [0, 5, 8, 9, 10, 13, 15, 16, 20], "defin": [0, 6, 7, 8, 9, 10, 12, 14, 17, 18, 19, 20], "section": [0, 3, 7, 8, 10, 15, 18, 21], "compat": [0, 5, 12, 13, 19], "flag": [0, 2, 5, 7, 8, 12, 13, 20], "cfg": [0, 3, 5, 6, 7, 8, 11, 14, 19, 20], "json_cfg": 0, "compiler_cl": 0, "routin": [0, 1, 12, 20], "runtime_cl": 0, "protocol_cl": 0, "between": [0, 1, 7, 11, 12, 13, 20], "tester": 0, "runner": [0, 2, 9, 20, 21], "save_model_path": [0, 6, 11, 13, 14, 19, 20, 21], "where": [0, 2, 4, 7, 12, 13, 17], "upload": [0, 12], "devic": [0, 1, 3, 5, 7, 9, 10, 12, 14, 16, 20, 21], "context": [0, 12, 21], "llvm": [0, 5, 7, 11, 19, 20, 21], "stackvm": 0, "cpu": [0, 5, 7, 9, 11, 12, 16], "c": [0, 1, 5, 20], "hybrid": 0, "composit": 0, "cuda": [0, 1], "nvptx": 0, "opencl": [0, 1], "sdaccel": 0, "aocl": 0, "aocl_sw_emu": 0, "vulkan": 0, "metal": [0, 9, 15, 17], "vpi": 0, "rocm": [0, 1], "ext_dev": 0, "hexagon": 0, "webgpu": 0, "what": [0, 7, 20], "acceler": [0, 1, 5, 12], "id": [0, 2, 12, 13, 17, 19], "target_device_context_id": [0, 21], "vm": [0, 5], "relai": 0, "virtualmachin": 0, "disabl": [0, 7, 18], "kera": [0, 5, 7, 12, 13, 20, 21], "darknet": [0, 12], "torch": [0, 2, 6, 11, 20], "tflite": [0, 2, 4, 5, 9, 11, 13, 15, 19, 20], "type": [0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 17, 19, 20, 21], "wise": [0, 12, 20], "kind": 0, "tag": [0, 12], "host": [0, 4, 11, 12, 20, 21], "target_host": [0, 21], "opt": [0, 21], "opt_level": [0, 7, 11, 19, 21], "libdarknet": [0, 21], "libdarknet_path": [0, 21], "so": [0, 1, 11, 12, 14, 18, 21], "librari": [0, 1, 7, 8, 9, 11, 12, 13, 18], "stage": [0, 20], "function": [0, 1, 2, 12, 13, 14, 18, 20], "dict_to_tupl": 0, "pytorch": [0, 2, 9, 12, 15, 20], "conv2d": [0, 6], "conv2d_data_layout": [0, 7, 11, 19, 20, 21], "oper": [0, 1, 7, 11, 12], "kernel": [0, 6], "conv2d_kernel_layout": [0, 21], "fp16": [0, 1], "precis": [0, 1, 7, 8, 12, 21], "appli": [0, 1, 7, 11, 12, 14], "fp32": [0, 1, 7, 20], "weight": [0, 1, 7, 8, 11, 20], "int8": [0, 1, 7, 11, 13, 20], "tensorrt": [0, 1], "deleg": 0, "support": [0, 2, 6, 11, 12, 17, 20], "percentag": [0, 6, 12], "dataset_percentag": [0, 13, 20, 21], "tell": [0, 13], "how": [0, 4, 5, 7, 8, 10, 13, 18, 19, 20], "much": [0, 1, 13], "compiled_model_path": [0, 5, 6, 7, 8, 11, 12, 13, 19, 20, 21], "address": [0, 4, 11, 17, 20], "port": [0, 4, 5, 11, 20], "bytesbasedprotocol": 0, "packet": [0, 11], "packet_s": [0, 11], "maximum": [0, 12, 17, 18], "byte": [0, 12], "endian": [0, 5], "big": 0, "littl": [0, 5], "transfer": [0, 1], "onli": [0, 2, 3, 7, 8, 11, 13, 16, 19], "mai": [0, 1, 7, 11, 12, 13, 17, 18, 20], "some": [0, 1, 2, 7, 11, 12, 13, 17, 20], "tfliteruntim": [0, 2, 12, 13, 19, 20], "googl": [0, 1, 7], "coral": [0, 7], "devboard": 0, "tflitecompil": [0, 2, 7, 11, 12, 19, 20], "edgetpu": [0, 7, 20], "192": 0, "168": 0, "188": 0, "35": 0, "12344": 0, "32768": [0, 11], "home": [0, 18, 21], "mendel": 0, "1": [0, 2, 4, 7, 11, 12, 13, 14, 17, 19, 21], "setup": [0, 3], "server": [0, 4, 11, 12, 20], "libedgetpu": 0, "also": [0, 1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 17, 20], "case": [0, 1, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 20], "skip": [0, 7], "tar": [0, 3, 5, 7, 11, 19, 20, 21], "3": [0, 2, 6, 7, 8, 11, 13, 14, 19, 20, 21], "more": [0, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 17, 19, 20], "check": [0, 5, 7, 11, 12, 13, 14, 17, 18, 19, 20], "client": [0, 4, 11, 12, 14], "found": [0, 1, 3, 11, 12, 13, 14, 20], "edg": [0, 7, 10], "inference_runn": 0, "pre": [0, 1], "specif": [0, 1, 2, 5, 6, 7, 9, 10, 13, 14, 16, 17, 18, 20], "dataprovid": [0, 2, 9, 14, 20], "sourc": [0, 1, 3, 5, 12, 14, 20, 21], "outputcollector": [0, 2, 9, 13, 14, 20], "python3": [0, 3], "m": [0, 5, 21], "object_detect": [0, 2, 14, 20], "darknet_coco": [0, 2, 20], "tvmdarknetcocoyolov3": [0, 2, 12, 20], "camera_dataprovid": [0, 14], "cameradataprovid": [0, 12, 14], "collector": [0, 12, 13], "name_print": 0, "nameprint": 0, "posit": [0, 2, 6, 14], "modelwrappercl": 0, "runtimecl": 0, "dataprovidercl": 0, "output_collector": 0, "result": [0, 1, 4, 5, 7, 8, 10, 11, 12, 13, 14, 20], "pass": [0, 7, 11, 12, 13, 14, 17, 18, 20], "contain": [0, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21], "open": [0, 1, 2, 5, 12, 13, 20], "name": [0, 2, 5, 7, 11, 12, 13, 17, 21], "csv": [0, 2], "open_images_classes_extractor": [0, 2], "dtype": [0, 2, 12, 13, 14], "input_dtyp": 0, "tensor": [0, 1, 12, 13], "element": [0, 11, 12, 13], "encod": [0, 12], "base64": 0, "arrai": [0, 12, 13, 14], "video": [0, 1, 12, 14], "video_file_path": [0, 14], "camera": [0, 12, 14, 20], "dev": [0, 3, 14], "videox": 0, "x": [0, 12], "eg": [0, 12], "video0": [0, 14], "width": [0, 2], "image_width": 0, "height": [0, 2], "image_height": 0, "detector": 0, "detection_visu": [0, 13], "detectionvisu": [0, 12, 13], "yolov3": [0, 12, 20], "analyz": [0, 5], "visual": [0, 7, 9, 12, 14, 15, 20], "render_report": [0, 20], "rst": [0, 12, 20], "along": [0, 1, 2, 12, 13, 16, 20], "sphinx": [0, 7], "ref": 0, "figur": [0, 12], "dir": [0, 4, 7, 21], "specifi": [0, 1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19], "embed": [0, 16, 20], "comput": [0, 1, 8, 12, 16, 20], "rel": [0, 1], "img": [0, 7, 21], "fall": 0, "observ": [0, 12, 20], "autogener": [0, 9, 10, 12], "As": [0, 7, 8, 11, 17, 20], "now": [0, 3, 14], "most": [0, 1, 7, 8, 11, 12, 19, 20], "overal": [0, 12, 16], "time": [0, 1, 6, 7, 12, 20], "usag": [0, 5, 6, 7, 9, 10, 11, 12, 13, 16], "ram": [0, 6, 12], "gpu": [0, 6, 7, 11, 12, 16, 20], "util": [0, 1, 2, 3, 7, 11, 12, 16, 17, 20], "task": [0, 7, 12, 20, 21], "confus": [0, 7, 11, 16, 21], "matric": [0, 8], "accuraci": [0, 6, 7, 8, 12, 19, 21], "g": [0, 1, 3, 5, 6, 7, 11, 12, 13, 14, 17, 20, 21], "mean": [0, 2, 6, 7, 11, 12, 13, 20, 21], "detect": [0, 1, 2, 7, 12, 13, 14, 20], "recal": 0, "curv": 0, "averag": [0, 6], "list_class": 0, "class_info": 0, "though": 0, "limit": [0, 2], "repres": [0, 2, 6, 8, 12, 13, 14, 20], "onnxconvers": [0, 2, 9], "amount": [0, 18], "control": [0, 20], "v": [0, 2, 5, 17, 20], "vv": [0, 2, 20], "python": [0, 2, 3, 9, 11, 13, 16, 21], "docstr": [0, 2], "whether": [0, 4, 12, 13, 19], "current": [0, 1, 2, 4, 7, 12, 13, 19, 20], "environ": [0, 1, 2, 5, 9, 10, 17, 21], "structur": [0, 1, 2, 9, 11, 12, 13, 15], "like": [0, 1, 6, 7, 8, 11, 12, 17, 18, 19, 20], "ad": [0, 1, 4, 5, 7, 8, 9, 11, 12, 13], "detail": [0, 2, 5, 9, 11, 13, 20], "arg": [0, 2, 12, 13], "chapter": [1, 4, 10, 13], "typic": [1, 10], "perform": [1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 14, 19, 20], "target": [1, 5, 7, 9, 11, 12, 19, 20, 21], "A": [1, 8, 12, 13, 14], "deploi": [1, 10, 11], "iot": 1, "usual": [1, 7, 12, 13, 20, 21], "goe": [1, 12], "through": [1, 8, 11, 12, 20], "undergo": 1, "analysi": [1, 2, 12, 14], "loader": 1, "preprocess": [1, 7, 12, 13, 14, 20], "design": [1, 7, 12], "scratch": 1, "baselin": 1, "wide": 1, "exist": [1, 7, 11, 12, 14, 20], "semant": 1, "segment": [1, 12, 13], "instanc": [1, 4, 7, 12, 14, 17, 18], "etc": [1, 4, 10, 11, 12], "adjust": [1, 6, 8, 20], "particular": [1, 2, 7, 12, 19, 20], "us": [1, 2, 6, 8, 9, 10, 12, 14, 16, 17, 18], "loss": [1, 7], "algorithm": 1, "improv": [1, 7, 8, 12], "represent": [1, 12], "avail": [1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20], "differ": [1, 6, 7, 11, 12, 13, 19], "re": 1, "set": [1, 2, 3, 4, 5, 7, 8, 12, 14, 16, 17, 19, 20, 21], "audio": [1, 20], "signal": [1, 13], "sequenc": [1, 8, 11, 14], "oct": 1, "sensor": [1, 11], "associ": [1, 12, 14], "class": [1, 5, 6, 7, 9, 11, 12, 14, 15, 16, 17, 20], "mask": [1, 12, 13], "descript": [1, 2, 10, 11, 12, 13, 20], "categori": 1, "largest": 1, "subset": [1, 7, 12], "valid": [1, 4, 12, 13, 14, 18], "small": [1, 7, 8, 20], "verifi": [1, 2], "after": [1, 5, 8, 12, 13, 14, 18, 20], "valu": [1, 2, 3, 6, 8, 11, 12, 13, 17, 18], "overfit": 1, "occur": 1, "test": [1, 3, 5, 6, 7, 8, 9, 11, 12, 18, 19, 20, 21], "act": [1, 11, 12], "final": [1, 3, 7, 12], "mutual": 1, "exclus": 1, "bias": 1, "wai": [1, 10, 11, 12, 13, 17, 20], "kaggl": 1, "search": [1, 10, 20], "univers": 1, "page": 1, "voic": 1, "popular": 1, "approach": [1, 11, 20], "find": [1, 4, 12], "fit": [1, 11, 12], "problem": [1, 12, 13, 16, 20], "adapt": 1, "In": [1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 17], "layer": [1, 6, 8, 12, 13, 20], "slightli": 1, "modifi": [1, 6, 13, 17, 20], "new": [1, 7, 8, 9, 10, 12, 14], "These": [1, 6, 14, 18, 20], "updat": [1, 3, 12, 13, 17], "unfrozen": 1, "larger": [1, 6, 7, 8, 20], "veri": [1, 8, 20], "fine": [1, 6, 8, 19, 20], "tune": [1, 6, 8, 19, 20], "better": [1, 6, 8, 11, 20], "start": [1, 3, 4, 5, 10, 11, 12, 20], "point": [1, 7, 11, 12, 13], "allow": [1, 2, 4, 5, 7, 8, 11, 12, 13, 14, 17, 19, 20], "correctli": 1, "smaller": [1, 7, 21], "reduc": [1, 6, 7, 8], "intuit": 1, "behind": 1, "multipl": [1, 7, 10, 13, 14, 19, 20], "real": [1, 12, 20], "life": [1, 12], "one": [1, 2, 7, 8, 10, 11, 12, 13, 14, 19, 20], "reus": 1, "anoth": [1, 7, 11, 12, 13, 14, 17, 20], "onc": [1, 12], "adequ": 1, "order": [1, 4, 6, 7, 8, 11, 12, 13, 14, 18], "normal": [1, 6, 8, 13, 20], "resiz": 1, "especi": [1, 2, 20], "quit": 1, "reason": [1, 13], "augment": 1, "random": [1, 12], "bright": 1, "contrast": 1, "crop": 1, "jitter": 1, "rotat": 1, "significantli": [1, 6, 8], "prevent": [1, 6, 14], "proper": [1, 7, 12], "procedur": 1, "step": [1, 5, 10, 11, 12, 13, 15, 20], "includ": [1, 7, 12, 13, 14, 17, 20, 21], "regular": [1, 7, 12, 13, 20], "chanc": 1, "adam": [1, 6, 8], "adagrad": 1, "involv": 1, "hyperparamet": 1, "schedul": 1, "autom": [1, 11], "those": [1, 8, 12, 13, 17], "lr": 1, "finder": 1, "earli": 1, "stop": [1, 12, 13], "introduc": [1, 12], "measur": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 19, 20, 21], "intermedi": [1, 12], "period": 1, "best": [1, 10, 13, 19, 20], "accord": [1, 12], "successfulli": [1, 12], "run": [1, 2, 3, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 19, 21], "hardwar": [1, 5, 7, 8, 9, 12, 15, 20], "mix": 1, "hand": 1, "benefit": 1, "chang": [1, 3, 6, 7, 11, 12, 17, 20], "int4": 1, "straightforward": 1, "integ": [1, 7, 8, 12], "quantiz": [1, 9, 11, 12, 13, 15, 20], "without": [1, 5, 6, 7, 8, 12], "signific": [1, 7, 8, 20], "fusion": [1, 12], "special": 1, "convolut": [1, 6], "shape": [1, 2, 12, 13, 14], "among": 1, "entir": [1, 7, 8, 20], "prune": [1, 9, 15], "condit": [1, 12], "distil": 1, "teacher": 1, "suppos": [1, 12], "same": [1, 3, 7, 11, 12, 13, 14, 17], "origin": [1, 6, 8, 12], "drop": [1, 4], "transform": 1, "code": [1, 2, 12, 13, 20], "program": [1, 12, 18], "languag": [1, 12], "halid": 1, "java": 1, "machin": [1, 5, 12], "opengl": 1, "fpga": 1, "bitstream": 1, "effici": [1, 7, 20], "project": [2, 10, 20], "assess": 2, "we": [2, 3, 6, 7, 8, 11, 13, 14, 20], "overview": [2, 9], "first": [2, 3, 7, 8, 11, 12, 13, 14, 21], "make": [2, 3, 6, 12], "sure": 2, "them": [2, 4, 5, 7, 8, 11, 12, 13, 20], "similar": [2, 8, 13, 17, 18, 19], "onnxcompil": [2, 20], "tensorflow_optim": 2, "tensorflowoptim": 2, "ire": [2, 9, 15, 17, 20], "ireecompil": [2, 5, 20], "tensorflow_prun": [2, 8, 20], "tensorflowpruningoptim": [2, 8, 20], "tensorflow_clust": [2, 8, 20], "tensorflowclusteringoptim": [2, 8, 20], "nni_prun": [2, 6, 20], "nnipruningoptim": [2, 6, 20], "model_insert": [2, 20], "modelinsert": [2, 20], "random_dataset": [2, 20], "randomizedclassificationdataset": [2, 12, 20], "coco_dataset": [2, 20], "cocodataset2017": [2, 20], "open_images_dataset": [2, 20], "openimagesdatasetv6": [2, 12, 20], "helper": [2, 13], "detection_and_segment": [2, 13], "objectdetectionsegmentationdataset": 2, "magic_wand_dataset": [2, 5, 20], "magicwanddataset": [2, 5, 20], "common_voice_dataset": [2, 20], "commonvoicedataset": [2, 20], "randomizeddetectionsegmentationdataset": [2, 20], "imagenet_dataset": [2, 20], "imagenetdataset": [2, 20], "visual_wake_words_dataset": [2, 20], "visualwakewordsdataset": [2, 20], "instance_segment": [2, 20], "pytorch_coco": [2, 20], "pytorchcocomaskrcnn": [2, 13, 20], "yolact": [2, 20], "yolactwithpostprocess": [2, 20], "tensorflow_imagenet": [2, 20], "tensorflowimagenet": [2, 20], "yolactwrapp": 2, "yolo_wrapp": 2, "yolowrapp": 2, "framework": [2, 4, 9, 10, 12, 20, 21], "tensorflowwrapp": [2, 12], "tflite_magic_wand": [2, 5, 20], "magicwandmodelwrapp": [2, 5, 20], "tflite_person_detect": [2, 20], "persondetectionmodelwrapp": [2, 20], "pytorchwrapp": [2, 12], "yolov4": [2, 13, 14, 20], "onnxyolov4": [2, 14, 20], "pytorch_pet_dataset": [2, 6, 20], "pytorchpetdatasetmobilenetv2": [2, 6, 12, 20], "command": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 20], "ireeruntim": 2, "pytorchruntim": [2, 6], "onnxruntim": [2, 14, 20], "renod": [2, 9, 10, 15, 20], "renoderuntim": [2, 5], "let": [2, 3, 7, 13, 20], "consid": [2, 7, 14, 19], "want": [2, 7, 13], "compos": 2, "necessari": [2, 5, 7, 8, 11, 12, 20], "keyparam": 2, "float32": [2, 7, 11, 13, 20], "255": [2, 13], "8": [2, 6], "2": [2, 6, 12, 21], "7": [2, 7, 13], "detection_output": [2, 13, 14], "detectobject": [2, 13, 14], "numpi": [2, 12, 14, 20], "nn": [2, 6], "argparse_nam": [2, 11, 13, 20], "builtin": 2, "str": [2, 12, 13, 17], "string": [2, 12, 14, 17], "gener": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20], "coco": [2, 12], "model": [2, 4, 9, 10, 14, 15, 17, 19, 20], "resource_manag": [2, 12, 17, 20], "resourceuri": [2, 9, 17, 20], "true": [2, 5, 6, 8, 11, 12, 13, 21], "By": [2, 12, 17, 18], "static": [2, 12], "express": 2, "becaus": [2, 13], "did": 2, "miss": [2, 12, 18], "gain": 2, "access": [2, 9, 12, 13, 20], "satisfi": 2, "608": [2, 13, 14], "76": [2, 13], "38": [2, 13], "19": [2, 13], "tutori": [3, 5, 8], "microcontrol": 3, "jq": 3, "curl": 3, "west": 3, "cmake": 3, "On": [3, 12], "debian": 3, "linux": [3, 5], "distribut": [3, 7], "apt": 3, "y": [3, 12], "recommend": [3, 20], "ccach": 3, "tree": 3, "dfu": 3, "multilib": 3, "gcc": 3, "libmagic1": 3, "libsdl2": 3, "ninja": 3, "setuptool": 3, "tk": 3, "wheel": 3, "venv": 3, "mono": 3, "wget": [3, 5], "xz": [3, 5], "next": [3, 11, 12, 14], "workspac": [3, 4], "clone": [3, 20], "mkdir": 3, "p": 3, "cd": [3, 20], "Then": [3, 7, 8, 11, 13, 20], "initi": [3, 12], "ensur": [3, 6, 8, 13], "latest": [3, 5, 12], "sdk": 3, "virtual": [3, 5, 12, 18], "prepare_zephyr_env": 3, "sh": 3, "bin": 3, "activ": [3, 6, 7, 11, 12], "prepare_modul": 3, "upgrad": 3, "report": [3, 5, 6, 7, 8, 9, 10, 11, 20], "packag": [3, 5, 11, 18], "pyrenode_pkg": [3, 5], "variabl": [3, 9, 10, 12, 13, 14, 17, 19], "pyrenode3": [3, 5], "io": [3, 5, 12], "pkg": [3, 5], "export": [3, 5, 8, 12], "realpath": [3, 5], "tflitemicro": 3, "executor": 3, "stm32f746g_disco": 3, "board": 3, "app": 3, "dextra_conf_fil": 3, "conf": 3, "built": [3, 12], "binari": [3, 5, 7, 12], "elf": [3, 5], "infer": [3, 5, 6, 9, 11, 12, 13, 18, 20], "stm32": 3, "would": [3, 12, 17, 19, 20], "And": [3, 7], "previous": [3, 11], "comparison": [3, 6, 8, 20], "md": [3, 5, 6, 7, 8, 20, 21], "renode_stat": 3, "html": [3, 5, 6, 8, 20], "version": [3, 8, 11, 12, 16, 18], "gui": [4, 13, 14], "tool": [4, 7, 11, 20], "edit": [4, 20], "up": [4, 5, 13, 20, 21], "graph": [4, 12], "agnost": 4, "doe": [4, 7, 11, 12, 13, 17, 18, 20], "assum": [4, 11, 12, 13], "properti": [4, 12], "howev": 4, "complex": 4, "while": [4, 7, 16], "directli": [4, 11, 12, 13], "editor": [4, 20], "extra": [4, 20], "integr": [4, 5, 10, 20], "pipeline_manag": [4, 20], "argument": [4, 6, 7, 9, 10, 11, 12, 17, 19, 20], "spec": [4, 12, 13, 14], "deploy": [4, 9, 10, 11, 20], "127": [4, 11], "9000": 4, "web": 4, "under": [4, 5, 11], "5000": 4, "workflow": 4, "down": 4, "menu": 4, "top": [4, 21], "left": 4, "jsonconfig": [4, 5], "basic": [4, 20], "nativ": [4, 6, 9, 12, 20], "remov": [4, 6, 8, 12, 17], "node": [4, 13], "connect": [4, 5, 8, 12, 13, 20], "inform": [4, 7, 8, 9, 11, 12, 13, 15, 16, 18, 20], "two": [4, 6, 7, 8, 11, 12, 20], "chain": [4, 11, 12], "incompat": 4, "about": [4, 7, 9, 13, 15, 18, 20], "platform": [5, 7, 11, 16, 17, 20], "springbok": [5, 17], "risc": 5, "ai": [5, 20], "extens": [5, 7, 11, 12], "co": [5, 17], "develop": [5, 9, 10, 11, 12, 20], "solut": 5, "vector": [5, 7, 11, 12, 20], "blog": 5, "note": [5, 7], "quick": [5, 10], "docker": 5, "altern": 5, "manual": [5, 6], "instruct": [5, 17, 20], "readm": 5, "rm": 5, "ghcr": 5, "arch": 5, "u": [5, 7, 20], "behavior": [5, 11, 18], "physic": 5, "continu": 5, "obtain": [5, 12, 13, 14], "regard": [5, 13], "histogram": 5, "model_wrapp": [5, 6, 7, 8, 11, 12, 13, 14, 19, 20, 21], "magic_wand": [5, 17], "magic": 5, "wand": 5, "vmfb": 5, "backend": [5, 20], "model_framework": [5, 20, 21], "compiler_arg": 5, "symbol": 5, "fals": [5, 8, 11, 12, 13, 21], "bytecod": 5, "strip": [5, 8], "map": [5, 12, 13], "emit": 5, "polyglot": 5, "zip": 5, "tripl": 5, "riscv32": 5, "pc": 5, "rv32": 5, "f": [5, 13, 17], "zvl512b": 5, "zve32x": 5, "zve32f": 5, "abi": 5, "ilp32": 5, "runtime_binary_path": 5, "iree_runtim": 5, "platform_resc_path": 5, "gh": [5, 17], "sim": [5, 17], "config": [5, 7, 9, 10, 12, 14, 17], "resc": 5, "branch": [5, 17], "main": [5, 8, 12, 17], "resc_depend": 5, "repl": [5, 17], "infrastructur": 5, "springbokriscv32": 5, "repo": 5, "submodul": [5, 12, 20], "post_start_command": 5, "sysbu": 5, "vec_controlblock": 5, "writedoubleword": 5, "0xc": 5, "runtime_log_init_msg": 5, "profiler_dump_path": 5, "profil": 5, "dump": 5, "uart": [5, 11, 12, 20], "uartprotocol": 5, "tmp": 5, "baudrat": 5, "115200": 5, "train": [5, 8, 9, 10, 11, 12, 13, 20, 21], "acceleromet": 5, "gestur": 5, "recognit": 5, "entri": [5, 11, 12, 13], "manag": [5, 9, 10, 12, 15, 17, 20], "compar": [5, 6, 7, 8, 12, 20], "ground": [5, 12, 16], "truth": [5, 12, 16], "flat": 5, "buffer": 5, "minim": [5, 13, 19], "architectur": 5, "emul": 5, "monitor": [5, 12], "raw": [5, 12, 17], "githubusercont": [5, 17], "riscv": 5, "magic_wand_fp32": 5, "establish": 5, "via": [5, 9, 10, 11, 12, 13, 20], "sent": [5, 11, 12], "loop": [5, 12], "back": [5, 12], "finish": [5, 12, 13], "human": [5, 13], "readabl": [5, 13], "least": [6, 12, 13], "contribut": 6, "neuron": 6, "filter": 6, "neural": [6, 20], "intellig": [6, 20], "ken": [6, 7, 8, 10, 19, 21], "nni": [6, 20], "mobilenetv2": [6, 7, 8, 11, 12, 20], "pytorch_pet_dataset_mobilenetv2_full_model": 6, "pth": 6, "model_nam": [6, 7, 11, 12, 20, 21], "image_memory_layout": [6, 11, 21], "pruner": 6, "choos": [6, 9, 10], "pruner_typ": 6, "apoz": 6, "activationapozrankprun": 6, "zero": [6, 8, 13], "mean_rank": 6, "activationmeanrankprun": 6, "calcul": 6, "smallest": 6, "training_step": 6, "moreov": 6, "ha": [6, 7, 8, 12, 14, 17, 19], "mode": 6, "dependency_awar": 6, "awar": 6, "channel": 6, "ignor": 6, "relu": 6, "relu6": 6, "gelu": 6, "config_list": 6, "exclude_last_lay": 6, "exclud": 6, "last": [6, 14], "apart": [6, 7], "confid": 6, "coeffici": 6, "sparsiti": [6, 8], "dummi": 6, "consum": 6, "pruning_on_cuda": 6, "affect": [6, 13, 18], "criterion": 6, "accept": [6, 11, 12, 13], "respect": [6, 12, 13, 19], "finetuning_epoch": 6, "finetuning_batch_s": 6, "finetuning_learning_r": 6, "0_05": 6, "total_spars": 6, "05": 6, "op_typ": 6, "linear": [6, 12], "16": [6, 19], "64": 6, "crossentropyloss": 6, "5e": 6, "suggest": [6, 8, 18, 20], "separ": [6, 8, 11, 12, 17], "reduct": [6, 7, 8], "15": [6, 7, 8, 19], "92": 6, "0_15": [6, 8], "10": [6, 7, 8, 12], "1e": 6, "04": 6, "have": [6, 11, 12, 13, 17, 20], "fewer": 6, "decreas": [6, 8], "vram": 6, "increas": [6, 8], "summari": [6, 7, 8, 14], "few": [6, 8, 13], "9632653061": 6, "4": [6, 8, 13, 19], "130": 6, "853": 6, "00": [6, 8], "9299319728": 6, "660": 6, "421": 6, "11": [6, 21], "27": 6, "8102040816": 6, "813": 6, "380": 6, "31": 6, "61": 6, "speed": [6, 8, 12], "plot": [6, 7, 20], "over": [6, 7, 12, 19, 20], "simpl": [7, 20], "x86": [7, 11], "do": [7, 8, 12, 20], "go": 7, "resourc": [7, 9, 10, 11, 12, 13, 18, 20], "uri": [7, 9, 12], "scheme": [7, 9, 12], "our": 7, "against": 7, "everi": [7, 12, 16, 19], "kei": [7, 11, 12, 13, 17], "wrapper": [7, 12, 13, 14], "postprocess": [7, 11, 12, 13, 20], "read": [7, 11, 12, 14, 20], "titl": 7, "native_": 7, "prefix": [7, 12, 16], "matrix": [7, 11, 12, 16, 20, 21], "well": [7, 12], "markdown": [7, 20], "full": [7, 11, 12, 17, 19], "link": [7, 17], "aggreg": [7, 19], "sensit": [7, 21], "Such": [7, 11], "easi": [7, 11, 17], "ci": [7, 21], "simplifi": 7, "deriv": [7, 12], "conveni": 7, "singl": [7, 9, 12, 14, 19, 20], "great": 7, "across": [7, 16, 20], "mani": 7, "cloud": 7, "fairli": 7, "larg": [7, 11, 12, 17], "varieti": 7, "focus": [7, 20], "product": [7, 19], "purpos": [7, 8, 12, 13, 18, 20], "focu": 7, "out": [7, 19, 20], "fast": [7, 20], "lightweight": 7, "further": [7, 12], "unus": 7, "highli": 7, "flatbuff": 7, "interpret": [7, 13, 14, 17], "add": [7, 11, 12, 13, 17], "f32": 7, "inference_input_typ": [7, 11, 13, 20], "inference_output_typ": [7, 11, 13, 20], "block": [7, 9, 10, 11, 12, 14, 19, 20], "sinc": [7, 12, 13, 19, 20], "previou": [7, 11, 12, 13, 14], "presenc": 7, "inherit": [7, 11, 12, 13, 20], "worth": 7, "indic": [7, 8, 12, 13, 16], "desir": 7, "could": [7, 12], "bit": [7, 8], "float": [7, 12, 13], "keep": 7, "unchang": 7, "abl": [7, 11, 12], "correspond": [7, 8, 12, 17], "capabl": [7, 8], "see": [7, 11, 13, 17], "ca": 7, "15x": 7, "faster": 7, "2x": 7, "harm": 7, "stai": 7, "low": 7, "reporesent": 7, "instead": [7, 8, 19, 20], "predict": [7, 11, 12, 13, 14, 16, 20], "neglig": 7, "achiev": [7, 8, 10], "appear": 7, "background": 7, "happen": [7, 16], "automat": [7, 12, 13, 19], "avx2": [7, 11, 20], "avx": [7, 11], "mcpu": [7, 11, 20], "int8_tvm": [7, 11, 20], "visibl": [7, 11], "just": [7, 12], "matter": [7, 13], "simpli": [7, 11, 13, 17], "share": [7, 20], "40": [7, 8], "3x": 7, "demonstr": [7, 13], "easili": [7, 20], "interconnect": 7, "minor": 7, "alter": 7, "boost": 7, "9572730984": 7, "79405698": 7, "965973551": 7, "683232669": 7, "9519662539": 7, "02033412": 7, "41": 7, "61514549": 7, "9487005035": 7, "229375069": 7, "tabl": 7, "experi": 7, "techniqu": [8, 20], "certain": [8, 11, 16, 20], "hold": [8, 13], "becom": [8, 12], "spars": [8, 20], "compress": [8, 12], "storag": [8, 11], "dedic": [8, 14, 20], "advantag": 8, "know": 8, "tf": [8, 13], "target_spars": 8, "prune_dens": 8, "dens": 8, "often": 8, "pruning_frequ": 8, "cannot": [8, 11, 12], "pruning_end": 8, "chose": 8, "rmsprop": 8, "sgd": 8, "disable_from_logit": 8, "decid": [8, 20], "three": [8, 13, 14], "equal": [8, 12, 14], "128": [8, 13], "20": 8, "120": 8, "save_to_zip": 8, "despit": 8, "fact": [8, 17], "cli": [8, 9, 18, 20], "greater": 8, "0_3": 8, "5": [8, 12, 21], "82": 8, "pretrain": [8, 10], "unnecessari": 8, "9605442177": 8, "508": 8, "373": 8, "9190476190": 8, "14": 8, "062": 8, "345": 8, "9": [8, 21], "8367346939": 8, "12": 8, "349": 8, "076": 8, "37": [8, 11], "One": [8, 11], "k": 8, "centroid": 8, "cluster_dens": 8, "preserve_spars": 8, "clusters_numb": 8, "60": 8, "substanti": 8, "9006802721": 8, "451": 8, "142": 8, "71": 8, "30": 8, "introduct": 9, "stack": [9, 10], "prepar": [9, 12, 13, 20], "line": [9, 10, 11, 12, 13, 20], "autocomplet": [9, 20], "interfac": [9, 11, 12, 20], "displai": [9, 12, 13, 15, 20], "galleri": [9, 10], "zephyr": [9, 15], "bare": [9, 15, 17], "simul": [9, 15], "unstructur": [9, 15], "kenning_cache_dir": [9, 17], "kenning_max_cache_s": [9, 17], "kenning_use_default_excepthook": 9, "kenning_docs_venv": 9, "kenning_enable_all_log": 9, "kenning_disable_io_valid": 9, "kenningflow": [9, 10], "metadata": [9, 12, 14], "compon": [9, 10, 20], "cach": [9, 12, 18, 20], "custom": [9, 12, 14, 18], "api": [9, 10, 11, 13, 20], "dataconvert": [9, 20, 21], "argumentshandl": [9, 13], "resourcemanag": [9, 17], "consist": [10, 11, 12, 13, 14, 20], "guid": 10, "advanc": [10, 11], "ros2": [10, 12], "influenc": [10, 18], "deal": 10, "depth": 10, "user": [11, 12, 13, 17, 20], "reproduc": 11, "notabl": 11, "commonli": 11, "dictionari": [11, 12, 13, 14, 17], "mandatori": 11, "field": [11, 12, 13, 14, 19], "appropri": [11, 12], "underli": [11, 20], "simplest": 11, "cat": [11, 20, 21], "dog": [11, 20, 21], "dot": 11, "taken": [11, 12], "child": [11, 12], "arguments_structur": [11, 12, 13], "modelpath": [11, 13], "come": [11, 12, 13], "int": [11, 12, 13], "download_dataset": [11, 12, 21], "bool": [11, 12, 13], "classify_bi": [11, 21], "enum": [11, 13, 20], "anyth": [11, 12], "run_infer": [11, 12], "outcom": 11, "desktop": 11, "subject": 11, "lite": [11, 12, 13, 20], "apach": [11, 13, 20], "emphas": [11, 13], "remain": [11, 13], "consecut": [11, 13], "too": 11, "system": [11, 12, 18], "tcp": [11, 12, 20], "compiled_tflit": 11, "compiled_tvm": 11, "compiled_model": [11, 19], "12345": [11, 12], "restart": 11, "request": [11, 12, 13], "thing": [11, 13], "direct": [11, 12], "long": 11, "rest": [11, 12, 19], "side": [11, 12], "interact": 12, "green": 12, "orang": 12, "grei": 12, "surround": 12, "arrow": 12, "cycl": [12, 14], "depict": 12, "firstli": [12, 13], "modif": 12, "lastli": 12, "creation": 12, "arbitrari": [12, 14], "respons": [12, 13], "datasetprovid": 12, "modelrunn": 12, "non": [12, 13, 17], "predefin": 12, "must": [12, 14], "inner": 12, "chosen": [12, 13, 19], "pair": 12, "global": [12, 14], "uniqu": [12, 14], "place": [12, 14], "classmethod": [12, 13], "form_parameterschema": [12, 13], "dict": [12, 13, 17], "schema": [12, 13], "from_json": 12, "runners_specif": 12, "constructor": [12, 13, 14], "invok": 12, "rais": [12, 13, 17, 20], "jsonschema": 12, "validationerror": 12, "invalid": 12, "except": [12, 13, 17, 20], "undefin": 12, "redefin": 12, "repeatedli": 12, "construct": [12, 16], "run_single_step": 12, "modelruntimerunn": [12, 14], "inputs_sourc": 12, "tupl": [12, 14], "inputs_spec": 12, "iointerfac": 12, "abc": 12, "cleanup": [12, 13, 17], "clean": [12, 13], "longer": 12, "namespac": 12, "argumentpars": 12, "being": 12, "retriev": 12, "json_dict": 12, "abstract": 12, "should_clos": [12, 13], "got": 12, "close": [12, 13], "kenn": 12, "expect": [12, 14], "subdivis": 12, "force_download_dataset": [12, 21], "none": [12, 13, 14, 17, 20], "1234": [12, 21], "iter": [12, 14], "datax": 12, "datai": 12, "_dataindex": 12, "dataxtrain": 12, "train_test_split_represent": 12, "otherwis": 12, "empti": [12, 13], "dataytrain": 12, "dataxtest": 12, "dataytest": 12, "dataxv": 12, "datayv": 12, "calibration_dataset_gener": [12, 13], "25": [12, 13, 21], "state": 12, "yield": [12, 13], "download_dataset_fun": 12, "solv": 12, "iou": 12, "get_class_nam": 12, "get_data": 12, "prepare_input_sampl": 12, "prepare_output_sampl": 12, "fill": 12, "whole": [12, 13], "get_data_unload": 12, "get_input_mean_std": 12, "std": [12, 13], "compute_input_mean_std": 12, "standard": [12, 13, 17, 19, 21], "iter_test": 12, "datasetiter": 12, "iter_train": 12, "iter_v": 12, "attribut": [12, 17], "content": [12, 20], "prepare_external_calibration_dataset": 12, "scan": 12, "suitabl": 12, "usabl": 12, "sens": 12, "handl": [12, 13, 17], "hot": 12, "save_dataset_checksum": 12, "write": [12, 13], "set_batch_s": 12, "per": [12, 16], "test_subset_len": 12, "length": [12, 14], "been": 12, "train_subset_len": 12, "test_fract": 12, "val_fract": 12, "stratifi": 12, "append_index": 12, "append": [12, 13], "x_train": 12, "x_test": 12, "y_train": 12, "y_test": 12, "train_indic": 12, "test_indic": 12, "val_subset_len": 12, "verify_dataset_checksum": 12, "regardless": [12, 20], "blob": 12, "py": [12, 13], "_": [12, 19], "tensorflowdatasetmobilenetv2": 12, "from_fil": 12, "convert_input_to_byt": 12, "inputdata": 12, "preprocess_input": 12, "stream": 12, "convert_output_from_byt": 12, "outputdata": 12, "postprocess_output": 12, "derive_io_spec_from_json_param": 12, "get_io_specif": [12, 14], "couldn": 12, "t": 12, "absent": 12, "unknown": 12, "dimens": [12, 14], "parameterschema": 12, "convei": 12, "feed": 12, "get_framework_and_vers": [12, 13], "get_io_specification_from_model": 12, "get_output_format": 12, "get_path": 12, "pathoruri": 12, "load_model": [12, 13], "parse_io_specification_from_json": 12, "incomplet": 12, "unmodifi": 12, "post": 12, "prepare_model": 12, "whenev": 12, "actual": [12, 14, 17], "model_prepar": 12, "readi": 12, "fed": 12, "save_model": 12, "save_to_onnx": 12, "test_infer": 12, "train_model": 12, "explicitli": 12, "notimplementederror": [12, 13, 20], "th": 12, "input_model_path": [12, 20], "io_spec": [12, 13], "load_io_specif": [12, 13], "consult_model_typ": 12, "previous_block": 12, "force_onnx": 12, "match": [12, 13], "union": 12, "valueerror": 12, "get_input_format": 12, "get_input_typ": 12, "get_spec_path": 12, "concaten": 12, "save_io_specif": [12, 13, 20], "intern": 12, "legal": 12, "prequantized_dtyp": [12, 13], "scale": [12, 13], "zero_point": [12, 13], "preserv": 12, "ouput": 12, "set_compiled_model_path": 12, "set_input_typ": 12, "inputtyp": [12, 13], "deliveri": 12, "disable_performance_measur": [12, 21], "extract_output": 12, "reorder": 12, "get_io_spec_path": 12, "get_tim": 12, "timestamp": [12, 16], "ndarrai": [12, 13, 14], "np": [12, 13], "inference_session_end": 12, "session": 12, "track": 12, "inference_session_start": 12, "load_input": 12, "input_data": [12, 13], "succeed": 12, "modelnotloadederror": 12, "load_input_from_byt": 12, "self": [12, 13], "input_spec": 12, "attributeerror": 12, "prepare_io_specif": 12, "io_specif": 12, "prepare_loc": 12, "alloc": [12, 21], "preprocess_model_to_upload": 12, "read_io_specif": 12, "output_spec": 12, "iospecwrongformat": 12, "than": [12, 17, 19, 20], "assign": 12, "upload_output": 12, "Not": 12, "upload_stat": 12, "measurementscollector": [12, 20], "conduct": 12, "wait": 12, "incom": 12, "power": 12, "consumpt": 12, "success": 12, "failur": 12, "notif": 12, "mention": [12, 20], "ok": 12, "stat": 12, "enclos": [12, 17], "everyth": 12, "upon": 12, "confirm": 12, "until": [12, 17], "second": [12, 16], "within": [12, 19], "transport": 12, "disconnect": 12, "download_output": 12, "statu": 12, "download_statist": 12, "gather_data": 12, "timeout": 12, "serverstatu": 12, "receive_messag": 12, "won": 12, "initialize_cli": 12, "initialize_serv": 12, "receive_confirm": 12, "attach": 12, "receive_data": 12, "selector": 12, "event": 12, "arriv": 12, "noth": 12, "data_readi": 12, "request_failur": 12, "fail": 12, "request_optim": 12, "pathlib": [12, 13, 17, 20], "get_time_func": 12, "callabl": [12, 17], "perf_count": 12, "request_process": 12, "acknowledg": 12, "trigger": 12, "reach": 12, "own": 12, "request_success": 12, "b": 12, "send_data": 12, "send_messag": 12, "upload_input": 12, "upload_io_specif": 12, "upload_model": 12, "upload_optim": 12, "optimizers_cfg": 12, "upload_runtim": 12, "pipelinerunn": 12, "modelwrapperdataconvert": [12, 21], "ros2segmentationdataconvert": 12, "kenning_computer_vision_msg": 12, "to_next_block": 12, "to_previous_block": 12, "seri": 12, "held": 12, "serializ": 12, "decor": 12, "There": [12, 13, 16, 20], "explicit": 12, "accumul": 12, "measurementtyp": 12, "valuetoadd": 12, "initvaluefunc": 12, "lambda": [12, 17], "iadd": 12, "add_measur": 12, "initialvaluefunc": 12, "clear": [12, 17], "copi": 12, "get_valu": 12, "initialize_measur": 12, "measurement_typ": 12, "meant": [12, 13], "probe": 12, "update_measur": 12, "save_measur": [12, 20], "resultpath": 12, "systemstatscollector": 12, "thread": 12, "parallel": 12, "get_measur": 12, "_cpus_perc": [12, 16], "give": [12, 16], "_mem_perc": [12, 16], "_gpu_util": [12, 16], "_gpu_mem_util": [12, 16], "_timestamp": [12, 16], "n": 12, "overrid": 12, "subclass": 12, "sequenti": 12, "keyword": [12, 13], "kwarg": 12, "systemstatsmeasur": 12, "measurementnam": 12, "tagmeasur": 12, "tagnam": 12, "timemeasur": 12, "durat": [12, 21], "nanosecond": 12, "vice": [12, 20], "versa": [12, 20], "empir": 12, "add_entri": 12, "modelgener": 12, "verif": 12, "modelentri": 12, "check_convers": 12, "modelsdir": 12, "onnx_export": 12, "exportpath": 12, "supportstatu": 12, "onnx_import": 12, "importpath": 12, "microphon": 12, "captur": [12, 14], "frame": [12, 13, 14], "detach_from_sourc": 12, "detach": 12, "shutdown": 12, "fetch_input": 12, "baserealtimevisu": 12, "realtimedetectionvisu": [12, 14], "realtimesegmentationvisu": 12, "realtimeclassificationvisu": 12, "detach_from_output": 12, "process_output": [12, 13], "output_data": [12, 13], "bound": 12, "box": [12, 13], "screen": [12, 20], "datacollector": 12, "gracefulli": 12, "press": 12, "break": 12, "parser": [12, 20], "instanti": 12, "args_manag": 12, "_argumentgroup": 12, "parent": 12, "pointer": 12, "to_json": 12, "singleton": 12, "resolv": [12, 17], "url": [12, 17], "add_custom_url_schem": [12, 17], "custom_url_schem": 12, "pattern": 12, "clear_cach": 12, "get_resourc": [12, 17], "output_path": [12, 19], "checksumverifyerror": 12, "list_cached_fil": 12, "set_cache_dir": [12, 17], "cache_dir_path": 12, "set_max_cache_s": [12, 17], "max_cache_s": 12, "max": [12, 17, 19], "validate_resources_vers": 12, "uri_or_path": 12, "with_nam": 12, "with_stem": 12, "stem": 12, "with_suffix": 12, "suffix": [12, 17], "ext": 13, "resnet50": 13, "imagenet": 13, "input_0": 13, "224": 13, "0774157047271729": 13, "13": 13, "output_0": 13, "1000": 13, "00390625": 13, "processed_output": 13, "model_vers": 13, "four": 13, "processed_input": 13, "addition": [13, 17], "conflict": 13, "miscellan": 13, "dequant": 13, "class_nam": 13, "deviat": [13, 21], "segmobject": 13, "item": 13, "label": 13, "int64": 13, "score": [13, 14], "416": 13, "understand": 13, "crucial": [13, 20], "ones": 13, "tensorflowlitecompil": 13, "newli": 13, "termin": 13, "from_parameterschema": 13, "argument_nam": 13, "boolean": 13, "is_list": 13, "nullabl": 13, "inferenceinputtyp": [13, 20], "uint8": [13, 20], "inferenceoutputtyp": [13, 20], "quantize_model": 13, "def": [13, 17], "__init__": 13, "super": 13, "creator": 13, "seamless": [13, 20], "manner": 13, "outputtyp": 13, "kerasconvers": 13, "tensorflowconvers": 13, "tfliteconvert": 13, "from_keras_model": 13, "from_saved_model": 13, "aspect": 13, "hint": 13, "stick": 13, "inputmodelpath": 13, "target_spec": 13, "supported_op": 13, "opsset": 13, "tflite_builtins_int8": 13, "as_dtyp": 13, "representative_dataset": 13, "tflite_model": 13, "wb": 13, "model_cont": 13, "signatur": 13, "get_signature_runn": 13, "update_io_spec": 13, "sig_det": 13, "int_det": 13, "enumer": 13, "old_nam": 13, "new_nam": 13, "det": 13, "new_spec": 13, "get_input_detail": 13, "get_output_detail": 13, "__version__": 13, "snippet": 13, "consult": 13, "pythonpath": 13, "my_optim": 13, "sum": 13, "almost": 13, "necessarili": 13, "alwai": [13, 20], "output_width": 13, "output_height": 13, "cam_fram": [13, 14], "detection_data": [13, 14], "statement": 13, "quickli": [14, 20], "famili": 14, "filesystem": [14, 17], "grab": 14, "pack": 14, "definit": [14, 19], "json_flow_runn": 14, "input_memory_layout": 14, "input_width": 14, "input_height": 14, "608x608": 14, "ndim": 14, "rectangl": 14, "output_nam": 14, "input_nam": 14, "flow_scenario_detect": 14, "modelruntime_runn": 14, "execution_provid": 14, "cudaexecutionprovid": 14, "real_time_visu": [14, 20], "viewer_width": 14, "512": 14, "viewer_height": 14, "input_color_format": 14, "bgr": 14, "dearpygui": 14, "scope": 16, "nvidia": [16, 20], "jetson": 16, "cleaner": 17, "quota": 17, "old": 17, "similarli": 17, "gb": 17, "space": [17, 18], "enough": 17, "oldest": 17, "delet": 17, "bigger": 17, "absolut": 17, "dl": 17, "hf": 17, "hug": 17, "face": 17, "hub": 17, "compani": 17, "huggingfac": 17, "huggingface_hub": 17, "mistralai": 17, "mistral": 17, "7b": 17, "v0": 17, "behav": 17, "part": [17, 19, 20], "netloc": 17, "param": 17, "queri": 17, "fragment": 17, "curli": 17, "brace": 17, "insid": 17, "netloc_list": 17, "path_list": 17, "params_dict": 17, "query_dict": 17, "_list": 17, "_dict": 17, "seen": 17, "_gh_convert": 17, "base_url_schem": 17, "expandus": 17, "overwritten": 17, "list_fil": 17, "total": 17, "50gb": 18, "environment": 18, "sy": 18, "excepthook": 18, "overridden": [18, 20], "mechan": 18, "deduc": 18, "gluoncv": 18, "mxnet": [18, 20], "restrict": 18, "use_default_excepthook": 18, "mark": 18, "doc": [18, 20, 21], "caus": 18, "lot": [18, 20], "nois": 18, "optimization_runn": 19, "criteria": 19, "config_json": 19, "optimization_paramet": 19, "strategi": 19, "grid_search": 19, "optimiz": 19, "inferencetime_mean": 19, "polici": 19, "min": 19, "highlight": 19, "cartesian": 19, "maxim": 19, "singular": 19, "combin": [19, 20], "_all_result": 19, "7_compiled_model": 19, "0031105340278004203": 19, "inferencetime_std": 19, "0003073369739186006": 19, "inferencetime_median": 19, "003066142999159638": 19, "session_utilization_mem_percent_mean": 19, "26": 19, "089648437500003": 19, "session_utilization_mem_percent_std": 19, "2059426531921169": 19, "session_utilization_mem_percent_median": 19, "session_utilization_cpus_percent_avg_mean": 19, "55806884765625": 19, "session_utilization_cpus_percent_avg_std": 19, "068584532658253": 19, "session_utilization_cpus_percent_avg_median": 19, "85625": 19, "957273098380732": 19, "mean_precis": 19, "9574413909275928": 19, "mean_sensit": 19, "9571990915922841": 19, "g_mean": 19, "9566448082813757": 19, "top_5_accuraci": 19, "9961899578173902": 19, "copyright": 20, "2020": 20, "2024": 20, "aim": 20, "toward": 20, "modular": 20, "seamlessli": 20, "bring": 20, "yet": 20, "matur": 20, "versatil": 20, "still": 20, "extrem": 20, "necess": 20, "entireti": 20, "issu": 20, "unifi": 20, "rather": 20, "switch": 20, "reimplement": 20, "natur": 20, "shown": 20, "distinguish": 20, "addon": 20, "nvidia_perf": 20, "v6": 20, "vision": 20, "speech_to_text": 20, "speech": 20, "text": 20, "serial": 20, "fuzzi": 20, "sudo": 20, "egg": 20, "newer": 20, "releas": 20, "relat": 20, "onnxconvert": 20, "draw": 20, "templat": 20, "provis": 20, "subcommand": 20, "summar": 20, "term": 20, "graphic": 20, "browser": 20, "off": 20, "someth": 20, "onnx_tf": 20, "tensorflow_model_optim": 20, "float16": 20, "pleas": 20, "prototyp": 20, "01": 20, "modelframework": 20, "replac": 20, "run_loc": 20, "extend": 20, "conform": 20, "rule": 20, "enhanc": 20, "oxford": 21, "iiit": 21, "__main__": 21, "header": 21, "ver": 21, "null": 21, "target_device_context": 21, "runtime_use_vm": 21, "llext_binary_path": 21, "data_convert": 21, "modelwrapper_dataconvert": 21, "target_attr": 21, "target_microtvm_board": 21, "zephyr_header_templ": 21, "zephyr_llext_source_templ": 21, "usr": 21, "lib": 21, "compile_use_vm": 21, "output_conversion_funct": 21, "use_fp16_precis": 21, "use_int8_precis": 21, "use_tensorrt": 21, "0772869379999861": 21, "07418959635646176": 21, "0004082952863268992": 21, "median": 21, "07411699150000572": 21, "6328637510513": 21, "474337415693573": 21, "064507989907485": 21, "047848910424839235": 21, "9578231292517007": 21, "9959183673469387": 21, "9591048246905213": 21, "9572500515056033": 21, "9563343851604948": 21}, "objects": {"kenning.core.dataconverter": [[12, 0, 1, 0, "DataConverter", "Bases: ArgumentsHandler, ABC"]], "kenning.core.dataconverter.DataConverter": [[12, 1, 1, 0, "to_next_block", "Converts data to the format used by the surrounding block."], [12, 1, 1, 0, "to_previous_block", "Converts data from the format used by the surrounding block to one previous block expects."]], "kenning.core.dataconverter.DataConverter.to_next_block": [[12, 2, 2, 0, "data", "Data to be converted."]], "kenning.core.dataconverter.DataConverter.to_previous_block": [[12, 2, 2, 0, "data", "Data to be converted."]], "kenning.core.dataprovider": [[12, 0, 1, 0, "DataProvider", "Bases: Runner, ABC"]], "kenning.core.dataprovider.DataProvider.__init__": [[12, 2, 2, "kenning.core.dataprovider.DataProvider", "inputs_sources", "Bases: Runner, ABC"], [12, 2, 2, "kenning.core.dataprovider.DataProvider", "inputs_specs", "Bases: Runner, ABC"], [12, 2, 2, "kenning.core.dataprovider.DataProvider", "outputs", "Bases: Runner, ABC"]], "kenning.core.dataprovider.DataProvider": [[12, 1, 1, 0, "detach_from_source", "Detaches from the source during shutdown."], [12, 1, 1, 0, "fetch_input", "Gets the sample from device."], [12, 1, 1, 0, "prepare", "Prepares the source for data gathering depending on the source type."], [12, 1, 1, 0, "preprocess_input", "Performs provider-specific preprocessing of inputs."]], "kenning.core.dataprovider.DataProvider.preprocess_input": [[12, 2, 2, 0, "data", "The data to be preprocessed."]], "kenning.core.dataset": [[12, 0, 1, 0, "Dataset", "Bases: ArgumentsHandler, ABC"]], "kenning.core.dataset.Dataset.__init__": [[12, 2, 2, "kenning.core.dataset.Dataset", "batch_size", "Bases: ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.dataset.Dataset", "download_dataset", "Bases: ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.dataset.Dataset", "external_calibration_dataset", "Bases: ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.dataset.Dataset", "force_download_dataset", "Bases: ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.dataset.Dataset", "root", "Bases: ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.dataset.Dataset", "split_fraction_test", "Bases: ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.dataset.Dataset", "split_fraction_val", "Bases: ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.dataset.Dataset", "split_seed", "Bases: ArgumentsHandler, ABC"]], "kenning.core.dataset.Dataset": [[12, 3, 1, 0, "_dataindex", "ID of the next data to be delivered for inference."], [12, 3, 1, 0, "batch_size", "The batch size for the dataset."], [12, 1, 1, 0, "calibration_dataset_generator", "Creates generator for the calibration data."], [12, 3, 1, 0, "dataX", "List of input data (or data representing input data, i.e. file paths)."], [12, 3, 1, 0, "dataXtest", "dataX subset representing a testing set. Available after executing train_test_split_representations, otherwise empty."], [12, 3, 1, 0, "dataXtrain", "dataX subset representing a training set. Available after executing train_test_split_representations, otherwise empty."], [12, 3, 1, 0, "dataXval", "Optional dataX subset representing a validation set. Available after executing train_test_split_representations, otherwise empty."], [12, 3, 1, 0, "dataY", "List of output data (or data representing output data)."], [12, 3, 1, 0, "dataYtest", "dataY subset representing a testing set. Available after executing train_test_split_representations, otherwise empty."], [12, 3, 1, 0, "dataYtrain", "dataY subset representing a training set. Available after executing train_test_split_representations, otherwise empty."], [12, 3, 1, 0, "dataYval", "Optional dataY subset representing a validation set. Available after executing train_test_split_representations, otherwise empty."], [12, 1, 1, 0, "download_dataset_fun", "Downloads the dataset to the root directory defined in the constructor."], [12, 1, 1, 0, "evaluate", "Evaluates the model based on the predictions."], [12, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [12, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [12, 1, 1, 0, "get_class_names", "Returns list of class names in order of their IDs."], [12, 1, 1, 0, "get_data", "Returns the tuple of all inputs and outputs for the dataset."], [12, 1, 1, 0, "get_data_unloaded", "Returns the input and output representations before loading."], [12, 1, 1, 0, "get_input_mean_std", "Returns mean and std values for input tensors."], [12, 1, 1, 0, "iter_test", "Iterates over test data obtained from split."], [12, 1, 1, 0, "iter_train", "Iterates over train data obtained from split."], [12, 1, 1, 0, "iter_val", "Iterates over validation data obtained from split."], [12, 1, 1, 0, "prepare", "Prepares dataX and dataY attributes based on the dataset contents."], [12, 1, 1, 0, "prepare_external_calibration_dataset", "Prepares the data for external calibration dataset."], [12, 1, 1, 0, "prepare_input_samples", "Prepares input samples, i.e. load images from files, converts them."], [12, 1, 1, 0, "prepare_output_samples", "Prepares output samples."], [12, 1, 1, 0, "save_dataset_checksum", "Writes dataset checksum to file."], [12, 1, 1, 0, "set_batch_size", "Sets the batch size of the data in the iterator batches."], [12, 1, 1, 0, "test_subset_len", "Returns the length of a single batch from the training set."], [12, 1, 1, 0, "train_subset_len", "Returns the length of a single batch from the training set."], [12, 1, 1, 0, "train_test_split_representations", "Splits the data representations into train dataset and test dataset."], [12, 1, 1, 0, "val_subset_len", "Returns the length of a single batch from the training set."], [12, 1, 1, 0, "verify_dataset_checksum", "Checks whether dataset is already downloaded in its directory."]], "kenning.core.dataset.Dataset.calibration_dataset_generator": [[12, 2, 2, 0, "percentage", "The fraction of data to use for calibration."], [12, 2, 2, 0, "seed", "The seed for random state."]], "kenning.core.dataset.Dataset.evaluate": [[12, 2, 2, 0, "predictions", "The list of predictions from the model."], [12, 2, 2, 0, "truth", "The ground truth for given batch."]], "kenning.core.dataset.Dataset.from_argparse": [[12, 2, 2, 0, "args", "Arguments from ArgumentParser object."]], "kenning.core.dataset.Dataset.from_json": [[12, 2, 2, 0, "json_dict", "Arguments for the constructor."]], "kenning.core.dataset.Dataset.prepare_external_calibration_dataset": [[12, 2, 2, 0, "percentage", "Percentage of dataset to be used."], [12, 2, 2, 0, "seed", "Random state seed."]], "kenning.core.dataset.Dataset.prepare_input_samples": [[12, 2, 2, 0, "samples", "List of input samples to be processed."]], "kenning.core.dataset.Dataset.prepare_output_samples": [[12, 2, 2, 0, "samples", "List of output samples to be processed."]], "kenning.core.dataset.Dataset.set_batch_size": [[12, 2, 2, 0, "batch_size", "Number of input samples per batch."]], "kenning.core.dataset.Dataset.train_test_split_representations": [[12, 2, 2, 0, "append_index", "Whether to return the indices of the split."], [12, 2, 2, 0, "seed", "The seed for random state."], [12, 2, 2, 0, "stratify", "Whether to stratify the split."], [12, 2, 2, 0, "test_fraction", "The fraction of data to leave for model testing."], [12, 2, 2, 0, "val_fraction", "The fraction of data to leave for model validation."]], "kenning.core.flow": [[12, 0, 1, 0, "KenningFlow", "Bases: object"]], "kenning.core.flow.KenningFlow.__init__": [[12, 2, 2, "kenning.core.flow.KenningFlow", "runners", "Bases: object"]], "kenning.core.flow.KenningFlow": [[12, 1, 1, 0, "form_parameterschema", "Creates schema for the KenningFlow class."], [12, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [12, 1, 1, 0, "run", "Main process function. Repeatedly runs constructed graph in a loop."], [12, 1, 1, 0, "run_single_step", "Runs flow one time."]], "kenning.core.flow.KenningFlow.from_json": [[12, 2, 2, 0, "runners_specifications", "List of runners that creates the flow."]], "kenning.core": [[12, 4, 0, 1, "measurements", ""]], "kenning.core.measurements": [[12, 0, 1, 0, "Measurements", "Stores benchmark measurements for later processing."], [12, 0, 1, 0, "MeasurementsCollector", "It is a 'static' class collecting measurements from various sources."], [12, 0, 1, 0, "SystemStatsCollector", "It is a separate thread used for collecting system statistics."], [12, 5, 1, 0, "systemstatsmeasurements", "Decorator for measuring memory usage of the function."], [12, 5, 1, 0, "tagmeasurements", "Decorator for adding tags for measurements and saving their timestamps."], [12, 5, 1, 0, "timemeasurements", "Decorator for measuring time of the function."]], "kenning.core.measurements.Measurements": [[12, 1, 1, 0, "accumulate", "Adds given value to a measurement."], [12, 1, 1, 0, "add_measurement", "Add new value to a given measurement type."], [12, 1, 1, 0, "clear", "Clears measurement data."], [12, 1, 1, 0, "copy", "Makes copy of measurements data."], [12, 3, 1, 0, "data", "Dictionary storing lists of values."], [12, 1, 1, 0, "get_values", "Returns list of values for a given measurement type."], [12, 1, 1, 0, "initialize_measurement", "Sets the initial value for a given measurement type."], [12, 1, 1, 0, "update_measurements", "Adds measurements of types given in the other object."]], "kenning.core.measurements.Measurements.accumulate.initvaluefunc: ~typing": [[12, 2, 2, "kenning.core.measurements.Measurements.accumulate", "Callable[[]", "Adds given value to a measurement."]], "kenning.core.measurements.Measurements.accumulate": [[12, 2, 2, "kenning.core.measurements.Measurements.accumulate", "measurementtype: str", "Adds given value to a measurement."]], "kenning.core.measurements.Measurements.accumulate.valuetoadd: ~typing": [[12, 2, 2, "kenning.core.measurements.Measurements.accumulate", "Any", "Adds given value to a measurement."]], "kenning.core.measurements.Measurements.accumulate.~typing.Any] = &lt;function Measurements": [[12, 2, 2, "kenning.core.measurements.Measurements.accumulate", "&lt;lambda&gt;&gt;", "Adds given value to a measurement."]], "kenning.core.measurements.Measurements.add_measurement.initialvaluefunc: ~typing": [[12, 2, 2, "kenning.core.measurements.Measurements.add_measurement", "Callable[[]", "Add new value to a given measurement type."]], "kenning.core.measurements.Measurements.add_measurement": [[12, 2, 2, "kenning.core.measurements.Measurements.add_measurement", "measurementtype: str", "Add new value to a given measurement type."]], "kenning.core.measurements.Measurements.add_measurement.value: ~typing": [[12, 2, 2, "kenning.core.measurements.Measurements.add_measurement", "Any", "Add new value to a given measurement type."]], "kenning.core.measurements.Measurements.add_measurement.~typing.Any] = &lt;function Measurements": [[12, 2, 2, "kenning.core.measurements.Measurements.add_measurement", "&lt;lambda&gt;&gt;", "Add new value to a given measurement type."]], "kenning.core.measurements.Measurements.get_values": [[12, 2, 2, 0, "measurementtype", "The name of the measurement type."]], "kenning.core.measurements.Measurements.initialize_measurement": [[12, 2, 2, 0, "measurement_type", "The type (name) of the measurement."], [12, 2, 2, 0, "value", "The initial value for the measurement type."]], "kenning.core.measurements.Measurements.update_measurements": [[12, 2, 2, 0, "other", "A dictionary or another Measurements object that contains lists in every entry."]], "kenning.core.measurements.MeasurementsCollector": [[12, 1, 1, 0, "clear", "Clears measurement data."], [12, 1, 1, 0, "save_measurements", "Saves measurements to JSON file."]], "kenning.core.measurements.MeasurementsCollector.save_measurements": [[12, 2, 2, 0, "resultpath", "Path to the saved JSON file."]], "kenning.core.measurements.SystemStatsCollector.__init__": [[12, 2, 2, "kenning.core.measurements.SystemStatsCollector", "prefix", "It is a separate thread used for collecting system statistics."], [12, 2, 2, "kenning.core.measurements.SystemStatsCollector", "step", "It is a separate thread used for collecting system statistics."]], "kenning.core.measurements.SystemStatsCollector": [[12, 1, 1, 0, "get_measurements", "Returns measurements from the thread."], [12, 1, 1, 0, "run", "Method representing the thread's activity."]], "kenning.core.measurements.systemstatsmeasurements": [[12, 2, 2, 0, "measurementname", "The name of the measurement type."], [12, 2, 2, 0, "step", "The step for the measurements, in seconds."]], "kenning.core.measurements.tagmeasurements": [[12, 2, 2, 0, "tagname", "The name of tag."]], "kenning.core.measurements.timemeasurements": [[12, 2, 2, "kenning.core.measurements.timemeasurements", "float] = &lt;built-in function perf_counter&gt;", "Decorator for measuring time of the function."], [12, 2, 2, "kenning.core.measurements.timemeasurements", "measurementname: str", "Decorator for measuring time of the function."]], "kenning.core.measurements.timemeasurements.get_time_func: ~typing": [[12, 2, 2, "kenning.core.measurements.timemeasurements", "Callable[[]", "Decorator for measuring time of the function."]], "kenning.core.model": [[12, 0, 1, 0, "ModelWrapper", "Bases: IOInterface, ArgumentsHandler, ABC"]], "kenning.core.model.ModelWrapper.__init__": [[12, 2, 2, "kenning.core.model.ModelWrapper", "dataset", "Bases: IOInterface, ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.model.ModelWrapper", "from_file", "Bases: IOInterface, ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.model.ModelWrapper", "model_name", "Bases: IOInterface, ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.model.ModelWrapper", "model_path", "Bases: IOInterface, ArgumentsHandler, ABC"]], "kenning.core.model.ModelWrapper": [[12, 1, 1, 0, "convert_input_to_bytes", "Converts the input returned by the preprocess_input method to bytes."], [12, 1, 1, 0, "convert_output_from_bytes", "Converts bytes array to the model output format."], [12, 1, 1, 0, "derive_io_spec_from_json_params", "Creates IO specification by deriving parameters from parsed JSON dictionary. The resulting IO specification may differ from the results of get_io_specification, information that couldn't be retrieved from JSON parameters are absent from final IO spec or are filled with general value (example: '-1' for unknown dimension shape)."], [12, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [12, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [12, 1, 1, 0, "get_framework_and_version", "Returns name of the framework and its version in a form of a tuple."], [12, 1, 1, 0, "get_io_specification", "Returns a saved dictionary with input and output keys that map to input and output specifications."], [12, 1, 1, 0, "get_io_specification_from_model", "Returns a new instance of dictionary with input and output keys that map to input and output specifications."], [12, 1, 1, 0, "get_output_formats", "Returns list of names of possible output formats."], [12, 1, 1, 0, "get_path", "Returns path to the model in a form of a Path or ResourceURI object."], [12, 1, 1, 0, "load_model", "Loads the model from file."], [12, 1, 1, 0, "parse_io_specification_from_json", "Return dictionary with 'input' and 'output' keys that will map to input and output specification of an object created by the argument json schema."], [12, 1, 1, 0, "postprocess_outputs", "Processes the outputs for a given model."], [12, 1, 1, 0, "prepare_model", "Downloads the model (if required) and loads it to the device."], [12, 1, 1, 0, "preprocess_input", "Preprocesses the inputs for a given model before inference."], [12, 1, 1, 0, "run_inference", "Runs inference for a given preprocessed input."], [12, 1, 1, 0, "save_model", "Saves the model to file."], [12, 1, 1, 0, "save_to_onnx", "Saves the model in the ONNX format."], [12, 1, 1, 0, "test_inference", "Runs the inference on test split of the dataset."], [12, 1, 1, 0, "train_model", "Trains the model with a given dataset."]], "kenning.core.model.ModelWrapper.convert_input_to_bytes": [[12, 2, 2, 0, "inputdata", "The preprocessed inputs."]], "kenning.core.model.ModelWrapper.convert_output_from_bytes": [[12, 2, 2, 0, "outputdata", "Output data in raw bytes."]], "kenning.core.model.ModelWrapper.derive_io_spec_from_json_params": [[12, 2, 2, 0, "json_dict", "JSON dictionary formed by parsing the input JSON with ModelWrapper's parameterschema."]], "kenning.core.model.ModelWrapper.from_argparse": [[12, 2, 2, 0, "args", "Arguments from ArgumentParser object."], [12, 2, 2, 0, "dataset", "The dataset object to feed to the model."], [12, 2, 2, 0, "from_file", "Determines if the model should be loaded from model_path."]], "kenning.core.model.ModelWrapper.from_json": [[12, 2, 2, 0, "dataset", "The dataset object to feed to the model."], [12, 2, 2, 0, "from_file", "Determines if the model should be loaded from model_path."], [12, 2, 2, 0, "json_dict", "Arguments for the constructor."]], "kenning.core.model.ModelWrapper.load_model": [[12, 2, 2, 0, "model_path", "Path or URI to the model file."]], "kenning.core.model.ModelWrapper.parse_io_specification_from_json": [[12, 2, 2, 0, "json_dict", "Parameters for object constructor in JSON format."]], "kenning.core.model.ModelWrapper.postprocess_outputs": [[12, 2, 2, 0, "y", "The list of output data from the model."]], "kenning.core.model.ModelWrapper.preprocess_input": [[12, 2, 2, 0, "X", "The input data from the Dataset object."]], "kenning.core.model.ModelWrapper.run_inference": [[12, 2, 2, 0, "X", "The preprocessed inputs for the model."]], "kenning.core.model.ModelWrapper.save_model": [[12, 2, 2, 0, "model_path", "Path or URI to the model file."]], "kenning.core.model.ModelWrapper.save_to_onnx": [[12, 2, 2, 0, "model_path", "Path or URI to the model file."]], "kenning.core.model.ModelWrapper.train_model": [[12, 2, 2, 0, "batch_size", "The batch size for the training."], [12, 2, 2, 0, "epochs", "The number of epochs for training."], [12, 2, 2, 0, "learning_rate", "The learning rate for the training."], [12, 2, 2, 0, "logdir", "Path to the logging directory."]], "kenning.core.onnxconversion": [[12, 0, 1, 0, "ONNXConversion", "Bases: ABC"]], "kenning.core.onnxconversion.ONNXConversion.__init__": [[12, 2, 2, "kenning.core.onnxconversion.ONNXConversion", "framework", "Bases: ABC"], [12, 2, 2, "kenning.core.onnxconversion.ONNXConversion", "version", "Bases: ABC"]], "kenning.core.onnxconversion.ONNXConversion": [[12, 1, 1, 0, "add_entry", "Adds new model for verification."], [12, 1, 1, 0, "check_conversions", "Runs ONNX conversion for every model entry in the list of models."], [12, 1, 1, 0, "onnx_export", "Virtual function for exporting the model to ONNX in a given framework."], [12, 1, 1, 0, "onnx_import", "Virtual function for importing ONNX model to a given framework."], [12, 1, 1, 0, "prepare", "Virtual function for preparing the ONNX conversion test."]], "kenning.core.onnxconversion.ONNXConversion.add_entry": [[12, 2, 2, "kenning.core.onnxconversion.ONNXConversion.add_entry", "kwargs", "Adds new model for verification."], [12, 2, 2, 0, "modelgenerator", "Function that generates the model for ONNX conversion in a given framework."], [12, 2, 2, 0, "name", "Full name of the model, should match the name of the same models in other framework's implementations."]], "kenning.core.onnxconversion.ONNXConversion.check_conversions": [[12, 2, 2, 0, "modelsdir", "Path to the directory where the intermediate models will be saved."]], "kenning.core.onnxconversion.ONNXConversion.onnx_export": [[12, 2, 2, 0, "exportpath", "Path to the output ONNX file."], [12, 2, 2, 0, "modelentry", "ModelEntry object."]], "kenning.core.onnxconversion.ONNXConversion.onnx_import": [[12, 2, 2, 0, "importpath", "Path to the input ONNX file."], [12, 2, 2, 0, "modelentry", "ModelEntry object."]], "kenning.core.optimizer": [[12, 0, 1, 0, "Optimizer", "Bases: ArgumentsHandler, ABC"]], "kenning.core.optimizer.Optimizer.__init__": [[12, 2, 2, "kenning.core.optimizer.Optimizer", "compiled_model_path", "Bases: ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.optimizer.Optimizer", "dataset", "Bases: ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.optimizer.Optimizer", "location", "Bases: ArgumentsHandler, ABC"]], "kenning.core.optimizer.Optimizer": [[12, 1, 1, 0, "compile", "Compiles the given model to a target format."], [12, 1, 1, 0, "consult_model_type", "Finds output format of the previous block in the chain matching with an input format of the current block."], [12, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [12, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [12, 1, 1, 0, "get_framework_and_version", "Returns name of the framework and its version in a form of a tuple."], [12, 1, 1, 0, "get_input_formats", "Returns list of names of possible input formats."], [12, 1, 1, 0, "get_input_type", "Return input model type. If input type is set to \"any\", then it is derived from model file extension."], [12, 1, 1, 0, "get_output_formats", "Returns list of names of possible output formats."], [12, 1, 1, 0, "get_spec_path", "Returns input/output specification path for the model saved in model_path. It concatenates model_path and .json."], [12, 1, 1, 0, "load_io_specification", "Returns saved input and output specification of a model saved in model_path if there is one. Otherwise returns None."], [12, 1, 1, 0, "save_io_specification", "Internal function that saves input/output model specification which is used during both inference and compilation. If io_spec is None, the function uses specification of an input model stored in input_model_path + .json. If there is no specification stored in this path the function does not do anything."], [12, 1, 1, 0, "set_compiled_model_path", "Sets path for compiled model."], [12, 1, 1, 0, "set_input_type", "Sets input type of the model for the compiler."]], "kenning.core.optimizer.Optimizer.compile": [[12, 2, 2, 0, "input_model_path", "Path to the input model."], [12, 2, 2, 0, "io_spec", "Dictionary that has input and output keys that contain list of dictionaries mapping (property name) -> (property value) for the layers."]], "kenning.core.optimizer.Optimizer.consult_model_type": [[12, 2, 2, 0, "force_onnx", "Forces ONNX format."], [12, 2, 2, 0, "previous_block", "Previous block in the optimization chain."]], "kenning.core.optimizer.Optimizer.from_argparse": [[12, 2, 2, 0, "args", "Arguments from ArgumentParser object."], [12, 2, 2, 0, "dataset", "The dataset object that is optionally used for optimization."]], "kenning.core.optimizer.Optimizer.from_json": [[12, 2, 2, 0, "dataset", "The dataset object that is optionally used for optimization."], [12, 2, 2, 0, "json_dict", "Arguments for the constructor."]], "kenning.core.optimizer.Optimizer.get_input_type": [[12, 2, 2, 0, "model_path", "Path to the input model."]], "kenning.core.optimizer.Optimizer.get_spec_path": [[12, 2, 2, 0, "model_path", "Path where the model is saved."]], "kenning.core.optimizer.Optimizer.load_io_specification": [[12, 2, 2, 0, "model_path", "Path to the model which specification the function should read."]], "kenning.core.optimizer.Optimizer.save_io_specification": [[12, 2, 2, 0, "input_model_path", "Path to the input model."], [12, 2, 2, 0, "io_spec", "Specification of the input/ouput layers."]], "kenning.core.optimizer.Optimizer.set_compiled_model_path": [[12, 2, 2, "kenning.core.optimizer.Optimizer.set_compiled_model_path", "compiled_model_path", "Sets path for compiled model."]], "kenning.core.optimizer.Optimizer.set_input_type": [[12, 2, 2, "kenning.core.optimizer.Optimizer.set_input_type", "inputtype", "Sets input type of the model for the compiler."]], "kenning.core.outputcollector": [[12, 0, 1, 0, "OutputCollector", "Bases: Runner, ABC"]], "kenning.core.outputcollector.OutputCollector.__init__": [[12, 2, 2, "kenning.core.outputcollector.OutputCollector", "inputs_sources", "Bases: Runner, ABC"], [12, 2, 2, "kenning.core.outputcollector.OutputCollector", "inputs_specs", "Bases: Runner, ABC"], [12, 2, 2, "kenning.core.outputcollector.OutputCollector", "outputs", "Bases: Runner, ABC"]], "kenning.core.outputcollector.OutputCollector": [[12, 1, 1, 0, "detach_from_output", "Detaches from the output during shutdown."], [12, 1, 1, 0, "process_output", "Returns the inferred data back to the specific place/device/connection."], [12, 1, 1, 0, "should_close", "Checks if a specific exit condition was reached."]], "kenning.core.outputcollector.OutputCollector.process_output": [[12, 2, 2, 0, "input_data", "Data collected from Datacollector that was processed by the model."], [12, 2, 2, 0, "output_data", "Data returned from the model."]], "kenning.core.protocol": [[12, 0, 1, 0, "Protocol", "Bases: ArgumentsHandler, ABC"]], "kenning.core.protocol.Protocol": [[12, 1, 1, 0, "disconnect", "Ends connection with the other side."], [12, 1, 1, 0, "download_output", "Downloads the outputs from the target device."], [12, 1, 1, 0, "download_statistics", "Downloads inference statistics from the target device."], [12, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [12, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [12, 1, 1, 0, "gather_data", "Gathers data from the client."], [12, 1, 1, 0, "initialize_client", "Initializes client side of the protocol."], [12, 1, 1, 0, "initialize_server", "Initializes server side of the protocol."], [12, 1, 1, 0, "receive_confirmation", "Waits until the OK message is received."], [12, 1, 1, 0, "receive_data", "Receives data from the target device."], [12, 1, 1, 0, "receive_message", "Waits for incoming data from the other side of connection."], [12, 1, 1, 0, "request_failure", "Sends ERROR message back to the client if it failed to handle request."], [12, 1, 1, 0, "request_optimization", "Request optimization of model."], [12, 1, 1, 0, "request_processing", "Requests processing of input data and waits for acknowledgement."], [12, 1, 1, 0, "request_success", "Sends OK message back to the client once the request is finished."], [12, 1, 1, 0, "send_data", "Sends data to the target device."], [12, 1, 1, 0, "send_message", "Sends message to the target device."], [12, 1, 1, 0, "upload_input", "Uploads input to the target device and waits for acknowledgement."], [12, 1, 1, 0, "upload_io_specification", "Uploads input/output specification to the target device."], [12, 1, 1, 0, "upload_model", "Uploads the model to the target device."], [12, 1, 1, 0, "upload_optimizers", "Upload optimizers config to the target device."], [12, 1, 1, 0, "upload_runtime", "Uploads the runtime to the target device."]], "kenning.core.protocol.Protocol.from_argparse": [[12, 2, 2, 0, "args", "Arguments from Protocol object."]], "kenning.core.protocol.Protocol.from_json": [[12, 2, 2, 0, "json_dict", "Arguments for the constructor."]], "kenning.core.protocol.Protocol.gather_data": [[12, 2, 2, 0, "timeout", "Receive timeout in seconds."]], "kenning.core.protocol.Protocol.receive_data": [[12, 2, 2, 0, "connection", "Connection used to read data."], [12, 2, 2, 0, "mask", "Selector mask from the event."]], "kenning.core.protocol.Protocol.receive_message": [[12, 2, 2, 0, "timeout", "Receive timeout in seconds."]], "kenning.core.protocol.Protocol.request_optimization": [[12, 2, 2, "kenning.core.protocol.Protocol.request_optimization", "float] = &lt;built-in function perf_counter&gt;", "Request optimization of model."]], "kenning.core.protocol.Protocol.request_optimization.get_time_func: ~typing": [[12, 2, 2, "kenning.core.protocol.Protocol.request_optimization", "Callable[[]", "Request optimization of model."]], "kenning.core.protocol.Protocol.request_optimization.model_path: ~pathlib": [[12, 2, 2, "kenning.core.protocol.Protocol.request_optimization", "Path", "Request optimization of model."]], "kenning.core.protocol.Protocol.request_processing": [[12, 2, 2, "kenning.core.protocol.Protocol.request_processing", "float] = &lt;built-in function perf_counter&gt;", "Requests processing of input data and waits for acknowledgement."]], "kenning.core.protocol.Protocol.request_processing.get_time_func: ~typing": [[12, 2, 2, "kenning.core.protocol.Protocol.request_processing", "Callable[[]", "Requests processing of input data and waits for acknowledgement."]], "kenning.core.protocol.Protocol.request_success": [[12, 2, 2, 0, "data", "Optional data upon success, if any."]], "kenning.core.protocol.Protocol.send_data": [[12, 2, 2, 0, "data", "Data to send."]], "kenning.core.protocol.Protocol.send_message": [[12, 2, 2, 0, "message", "Message to be sent."]], "kenning.core.protocol.Protocol.upload_input": [[12, 2, 2, 0, "data", "Input data for inference."]], "kenning.core.protocol.Protocol.upload_io_specification": [[12, 2, 2, 0, "path", "Path to the json file."]], "kenning.core.protocol.Protocol.upload_model": [[12, 2, 2, 0, "path", "Path to the model."]], "kenning.core.protocol.Protocol.upload_optimizers": [[12, 2, 2, 0, "optimizers_cfg", "Config JSON of optimizers."]], "kenning.core.protocol.Protocol.upload_runtime": [[12, 2, 2, 0, "path", "Path to the runtime binary."]], "kenning.core.runner": [[12, 0, 1, 0, "Runner", "Bases: IOInterface, ArgumentsHandler, ABC"]], "kenning.core.runner.Runner.__init__": [[12, 2, 2, "kenning.core.runner.Runner", "inputs_sources", "Bases: IOInterface, ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.runner.Runner", "inputs_specs", "Bases: IOInterface, ArgumentsHandler, ABC"], [12, 2, 2, "kenning.core.runner.Runner", "outputs", "Bases: IOInterface, ArgumentsHandler, ABC"]], "kenning.core.runner.Runner": [[12, 1, 1, 0, "cleanup", "Method that cleans resources after Runner is no longer needed."], [12, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [12, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [12, 1, 1, 0, "run", "Method used to run this Runner."], [12, 1, 1, 0, "should_close", "Method that checks if Runner got some exit indication (exception etc.) and the flow should close."]], "kenning.core.runner.Runner.from_argparse": [[12, 2, 2, 0, "args", "Arguments from ArgumentParser object."], [12, 2, 2, 0, "inputs_sources", "Input from where data is being retrieved."], [12, 2, 2, 0, "inputs_specs", "Specifications of runner's inputs."], [12, 2, 2, 0, "outputs", "Outputs of this Runner."]], "kenning.core.runner.Runner.from_json": [[12, 2, 2, 0, "inputs_sources", "Input from where data is being retrieved."], [12, 2, 2, 0, "inputs_specs", "Specifications of runner's inputs."], [12, 2, 2, 0, "json_dict", "Arguments for the constructor."], [12, 2, 2, 0, "outputs", "Outputs of this Runner."]], "kenning.core.runner.Runner.run": [[12, 2, 2, 0, "inputs", "Inputs provided to this block."]], "kenning.core.runtime": [[12, 0, 1, 0, "Runtime", "Bases: ArgumentsHandler, ABC"]], "kenning.core.runtime.Runtime.__init__": [[12, 2, 2, "kenning.core.runtime.Runtime", "disable_performance_measurements", "Bases: ArgumentsHandler, ABC"]], "kenning.core.runtime.Runtime": [[12, 1, 1, 0, "extract_output", "Extracts and postprocesses the output of the model."], [12, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [12, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [12, 1, 1, 0, "get_input_formats", "Returns list of names of possible input formats names."], [12, 1, 1, 0, "get_io_spec_path", "Gets path to a input/output specification file which is model_path and .json concatenated."], [12, 1, 1, 0, "get_time", "Gets the current timestamp."], [12, 1, 1, 0, "infer", "Runs inference on single batch locally using a given runtime."], [12, 1, 1, 0, "inference_session_end", "Calling this function indicates that the inference session has ended."], [12, 1, 1, 0, "inference_session_start", "Calling this function indicates that the client is connected."], [12, 1, 1, 0, "load_input", "Loads and converts delivered data to the accelerator for inference."], [12, 1, 1, 0, "load_input_from_bytes", "The method accepts input_data in bytes and loads it according to the input specification."], [12, 1, 1, 0, "prepare_io_specification", "Receives the io_specification from the client in bytes and saves it for later use."], [12, 1, 1, 0, "prepare_local", "Runs initialization for the local inference."], [12, 1, 1, 0, "prepare_model", "Receives the model to infer from the client in bytes."], [12, 1, 1, 0, "preprocess_model_to_upload", "The method preprocesses the model to be uploaded to the client and returns a new path to it."], [12, 1, 1, 0, "read_io_specification", "Saves input/output specification so that it can be used during the inference."], [12, 1, 1, 0, "run", "Runs inference on prepared input."], [12, 1, 1, 0, "upload_output", "Returns the output to the client, in bytes."], [12, 1, 1, 0, "upload_stats", "Returns statistics of inference passes to the client."]], "kenning.core.runtime.Runtime.from_argparse": [[12, 2, 2, 0, "args", "Arguments from ArgumentParser object."]], "kenning.core.runtime.Runtime.from_json": [[12, 2, 2, 0, "json_dict", "Arguments for the constructor."]], "kenning.core.runtime.Runtime.get_io_spec_path": [[12, 2, 2, 0, "model_path", "URI to the compiled model."]], "kenning.core.runtime.Runtime.infer": [[12, 2, 2, 0, "X", "Batch of data provided for inference."], [12, 2, 2, 0, "model_wrapper", "Model that is executed on target hardware."], [12, 2, 2, 0, "postprocess", "Indicates if model output should be postprocessed."]], "kenning.core.runtime.Runtime.load_input": [[12, 2, 2, 0, "input_data", "Input data in bytes delivered by the client, preprocessed."]], "kenning.core.runtime.Runtime.load_input_from_bytes": [[12, 2, 2, 0, "input_data", "Input data in bytes delivered by the client."]], "kenning.core.runtime.Runtime.prepare_io_specification": [[12, 2, 2, 0, "input_data", "The io_specification` or None, if it should be loaded from another source."]], "kenning.core.runtime.Runtime.prepare_model": [[12, 2, 2, 0, "input_data", "Model data or None, if the model should be loaded from another source."]], "kenning.core.runtime.Runtime.preprocess_model_to_upload": [[12, 2, 2, 0, "path", "Path to the model to preprocess."]], "kenning.core.runtime.Runtime.read_io_specification": [[12, 2, 2, 0, "io_spec", "Specification of the input/output layers."]], "kenning.core.runtime.Runtime.upload_output": [[12, 2, 2, 0, "input_data", "Not used here."]], "kenning.core.runtime.Runtime.upload_stats": [[12, 2, 2, 0, "input_data", "Not used here."]], "kenning.utils.args_manager": [[12, 0, 1, 0, "ArgumentsHandler", "Bases: ABC"]], "kenning.utils.args_manager.ArgumentsHandler": [[12, 1, 1, 0, "form_argparse", "Creates argparse parser based on arguments_structure of class and its all parent classes."], [12, 1, 1, 0, "form_parameterschema", "Creates parameter schema based on arguments_structure of class and its all parent classes."], [12, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [12, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [12, 1, 1, 0, "to_json", "Convert object to JSON that contains its type and all parameters."]], "kenning.utils.args_manager.ArgumentsHandler.from_argparse": [[12, 2, 2, 0, "args", "Arguments from ArgumentParser object."], [12, 2, 2, "kenning.utils.args_manager.ArgumentsHandler.from_argparse", "kwargs", "Constructor wrapper that takes the parameters from argparse args."]], "kenning.utils.args_manager.ArgumentsHandler.from_json": [[12, 2, 2, 0, "json_dict", "Arguments for the constructor."], [12, 2, 2, "kenning.utils.args_manager.ArgumentsHandler.from_json", "kwargs", "Constructor wrapper that takes the parameters from json dict."]], "kenning.utils.resource_manager": [[12, 0, 1, 0, "ResourceManager", "Bases: object"], [12, 0, 1, 0, "ResourceURI", "Bases: Path"]], "kenning.utils.resource_manager.ResourceManager.__init__": [[12, 2, 2, "kenning.utils.resource_manager.ResourceManager", "args", "Bases: object"], [12, 2, 2, "kenning.utils.resource_manager.ResourceManager", "kwargs", "Bases: object"]], "kenning.utils.resource_manager.ResourceManager": [[12, 1, 1, 0, "add_custom_url_schemes", "Add user defined URL schemes."], [12, 1, 1, 0, "clear_cache", "Remove all cached files."], [12, 1, 1, 0, "get_resource", "Retrieve file and return path to it."], [12, 1, 1, 0, "list_cached_files", "Return list with cached files."], [12, 1, 1, 0, "set_cache_dir", "Set the cache directory path and creates it if not exists."], [12, 1, 1, 0, "set_max_cache_size", "Set the max cache size."], [12, 1, 1, 0, "validate_resources_version", "Retrieve Kenning resources version and check if it is compatible with currently used Kenning."]], "kenning.utils.resource_manager.ResourceManager.add_custom_url_schemes": [[12, 2, 2, 0, "custom_url_schemes", "Dictionary with custom url schemes entries."]], "kenning.utils.resource_manager.ResourceManager.get_resource": [[12, 2, 2, 0, "output_path", "Path to the output file."], [12, 2, 2, 0, "uri", "Resource URI."]], "kenning.utils.resource_manager.ResourceManager.set_cache_dir": [[12, 2, 2, 0, "cache_dir_path", "Path to be set as cache directory."]], "kenning.utils.resource_manager.ResourceManager.set_max_cache_size": [[12, 2, 2, 0, "max_cache_size", "Max cache size in bytes."]], "kenning.utils.resource_manager.ResourceURI.__init__": [[12, 2, 2, "kenning.utils.resource_manager.ResourceURI", "uri_or_path", "Bases: Path"]], "kenning.utils.resource_manager.ResourceURI": [[12, 6, 1, 0, "origin", "Returns the original string passed to the constructor."], [12, 6, 1, 0, "parent", "Get parent of the URI."], [12, 6, 1, 0, "uri", "Get URI of the resource."], [12, 1, 1, 0, "with_name", "Return new URI with changed name."], [12, 1, 1, 0, "with_stem", "Return new URI with changed stem."], [12, 1, 1, 0, "with_suffix", "Return new URI with changed suffix."]], "kenning.utils.resource_manager.ResourceURI.with_name": [[12, 2, 2, 0, "name", "New name to be used."]], "kenning.utils.resource_manager.ResourceURI.with_stem": [[12, 2, 2, 0, "stem", "New stem to be used."]], "kenning.utils.resource_manager.ResourceURI.with_suffix": [[12, 2, 2, 0, "suffix", "New suffix to be used."]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:parameter", "3": "py:attribute", "4": "py:module", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "module", "Python module"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"us": [0, 3, 4, 5, 7, 11, 13, 15, 20, 21], "ken": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20], "via": 0, "command": [0, 17, 21], "line": 0, "argument": [0, 2, 13], "class": [0, 2, 13], "autocomplet": 0, "interfac": 0, "model": [0, 1, 3, 5, 6, 7, 8, 11, 12, 13, 21], "train": [0, 1, 7], "In": 0, "framework": [0, 7, 11], "infer": [0, 7, 21], "perform": [0, 16, 21], "measur": [0, 12, 16], "test": 0, "target": 0, "hardwar": [0, 3], "run": [0, 4, 5, 11, 20], "gener": [0, 21], "report": [0, 12, 21], "displai": [0, 2], "inform": [0, 2, 21], "about": [0, 2], "avail": [0, 2], "deep": 1, "learn": 1, "deploy": [1, 12], "stack": 1, "from": 1, "dataset": [1, 12, 21], "prepar": [1, 3, 7], "optim": [1, 7, 11, 12, 19], "compil": [1, 7, 11, 21], "list": 2, "info": 2, "load": 2, "evalu": [3, 5, 11], "zephyr": 3, "runtim": [3, 5, 12, 13, 14], "environ": [3, 7, 18], "instal": [3, 4, 20], "renod": [3, 5], "support": [3, 13], "build": [3, 21], "magic": 3, "wand": 3, "tflite": [3, 7], "backend": 3, "microtvm": 3, "compar": 3, "result": [3, 6], "visual": 4, "data": [4, 12], "flow": [4, 12], "pipelin": [4, 11, 19], "manag": 4, "bare": 5, "metal": 5, "ire": 5, "simul": 5, "setup": [5, 6, 8], "creat": [5, 14], "scenario": 5, "structur": [6, 14, 20], "prune": [6, 8], "pytorch": 6, "experi": [6, 8], "quantiz": 7, "tvm": [7, 21], "option": [7, 8], "benchmark": 7, "nativ": [7, 11], "tensorflow": [7, 8, 21], "lite": 7, "speed": 7, "up": 7, "apach": 7, "autom": 7, "comparison": 7, "unstructur": 8, "cluster": 8, "introduct": [10, 20], "defin": [11, 13], "json": [11, 14, 21], "specif": [11, 12, 19], "its": 11, "singl": 11, "devic": 11, "remot": 11, "api": 12, "overview": 12, "process": 12, "i": [12, 13], "o": [12, 13], "kenningflow": [12, 13, 14], "runner": [12, 13, 14], "modelwrapp": 12, "protocol": 12, "dataconvert": 12, "onnxconvers": 12, "dataprovid": 12, "outputcollector": 12, "argumentshandl": 12, "resourcemanag": 12, "resourceuri": 12, "develop": 13, "block": 13, "metadata": 13, "implement": [13, 14, 20], "new": [13, 20], "compon": 13, "core": 13, "output": [13, 19], "input": 13, "type": [13, 14], "unimpl": 13, "method": 13, "applic": 14, "io": 14, "compat": 14, "non": 14, "standard": 14, "name": 14, "map": 14, "exampl": 14, "execut": 14, "galleri": 15, "case": 15, "metric": [16, 21], "resourc": 17, "access": 17, "cach": 17, "custom": 17, "uri": 17, "scheme": 17, "cli": 17, "variabl": 18, "kenning_cache_dir": 18, "kenning_max_cache_s": 18, "kenning_use_default_excepthook": 18, "kenning_docs_venv": 18, "kenning_enable_all_log": 18, "kenning_disable_io_valid": 18, "choos": 19, "config": 19, "detail": 19, "modul": 20, "pip": 20, "work": 20, "directli": 20, "repositori": 20, "usag": [20, 21], "tutori": 20, "librari": 20, "python": 20, "script": 20, "ad": 20, "sampl": 21, "autogener": 21, "pet": 21, "classif": 21, "local": 21, "cpu": 21, "time": 21, "averag": 21, "memori": 21, "qualiti": 21}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Using Kenning via command line arguments": [[0, "using-kenning-via-command-line-arguments"]], "Command-line arguments for classes": [[0, "command-line-arguments-for-classes"]], "Autocompletion for command line interface": [[0, "autocompletion-for-command-line-interface"]], "Model training": [[0, "model-training"]], "In-framework inference performance measurements": [[0, "in-framework-inference-performance-measurements"]], "Testing inference on target hardware": [[0, "testing-inference-on-target-hardware"]], "Running inference": [[0, "running-inference"]], "Generating performance reports": [[0, "generating-performance-reports"]], "Displaying information about available classes": [[0, "displaying-information-about-available-classes"], [2, "displaying-information-about-available-classes"]], "Deep Learning deployment stack": [[1, "deep-learning-deployment-stack"]], "From training to deployment": [[1, "from-training-to-deployment"]], "Dataset preparation": [[1, "dataset-preparation"]], "Model preparation and training": [[1, "model-preparation-and-training"]], "Model optimization": [[1, "model-optimization"]], "Model compilation and deployment": [[1, "model-compilation-and-deployment"]], "Kenning list": [[2, "kenning-list"]], "Kenning info": [[2, "kenning-info"]], "Loading a class with arguments": [[2, "loading-a-class-with-arguments"]], "Evaluating models on hardware using Kenning Zephyr Runtime": [[3, "evaluating-models-on-hardware-using-kenning-zephyr-runtime"]], "Preparing the Zephyr environment": [[3, "preparing-the-zephyr-environment"]], "Installing Kenning with Renode support": [[3, "installing-kenning-with-renode-support"]], "Building and evaluating Magic Wand model using TFLite backend": [[3, "building-and-evaluating-magic-wand-model-using-tflite-backend"]], "Building and evaluating Magic Wand model using microTVM backend": [[3, "building-and-evaluating-magic-wand-model-using-microtvm-backend"]], "Comparing the results": [[3, "comparing-the-results"]], "Visualizing Kenning data flows with Pipeline Manager": [[4, "visualizing-kenning-data-flows-with-pipeline-manager"]], "Installing Pipeline Manager": [[4, "installing-pipeline-manager"]], "Running Pipeline Manager with Kenning": [[4, "running-pipeline-manager-with-kenning"]], "Using Pipeline Manager": [[4, "using-pipeline-manager"]], "Bare-metal IREE runtime simulated using Renode": [[5, "bare-metal-iree-runtime-simulated-using-renode"]], "Setup": [[5, "setup"], [6, "setup"], [8, "setup"]], "Evaluating the model in Kenning": [[5, "evaluating-the-model-in-kenning"]], "Creating the scenario": [[5, "creating-the-scenario"]], "Running the scenario": [[5, "running-the-scenario"]], "Structured pruning for PyTorch models": [[6, "structured-pruning-for-pytorch-models"]], "Experiments": [[6, "experiments"], [8, "experiments"]], "Results": [[6, "results"]], "Model quantization and compilation using TFLite and TVM": [[7, "model-quantization-and-compilation-using-tflite-and-tvm"]], "Prepare environment": [[7, "prepare-environment"]], "Train the model (optional)": [[7, "train-the-model-optional"]], "Benchmarking a model using a native framework": [[7, "benchmarking-a-model-using-a-native-framework"]], "Optimizing a model using TensorFlow Lite": [[7, "optimizing-a-model-using-tensorflow-lite"]], "Quantizing a model using TensorFlow Lite": [[7, "quantizing-a-model-using-tensorflow-lite"]], "Speeding up inference with Apache TVM": [[7, "speeding-up-inference-with-apache-tvm"]], "Automated model comparison": [[7, "automated-model-comparison"]], "Unstructured Pruning of TensorFlow Models": [[8, "unstructured-pruning-of-tensorflow-models"]], "(Optional) Clustering": [[8, "optional-clustering"]], "Kenning": [[9, "kenning"], [20, "kenning"]], "Introduction": [[10, "introduction"], [20, "introduction"]], "Defining optimization pipelines in Kenning": [[11, "defining-optimization-pipelines-in-kenning"]], "JSON specification": [[11, "json-specification"]], "Model evaluation using its native framework": [[11, "model-evaluation-using-its-native-framework"]], "Optimizing and running a model on a single device": [[11, "optimizing-and-running-a-model-on-a-single-device"]], "Compiling a model and running it remotely": [[11, "compiling-a-model-and-running-it-remotely"]], "Kenning API": [[12, "kenning-api"]], "Deployment API overview": [[12, "deployment-api-overview"]], "Model processing": [[12, "model-processing"]], "I/O data flow": [[12, "i-o-data-flow"]], "Data flow reporting": [[12, "data-flow-reporting"]], "KenningFlow": [[12, "kenningflow"]], "Runner": [[12, "runner"]], "Dataset": [[12, "dataset"]], "ModelWrapper": [[12, "modelwrapper"]], "Optimizer": [[12, "optimizer"]], "Runtime": [[12, "runtime"]], "Protocol": [[12, "protocol"], [12, "id1"]], "Protocol specification": [[12, "protocol-specification"]], "DataConverter": [[12, "dataconverter"]], "Measurements": [[12, "measurements"]], "ONNXConversion": [[12, "onnxconversion"]], "DataProvider": [[12, "dataprovider"]], "OutputCollector": [[12, "outputcollector"]], "ArgumentsHandler": [[12, "argumentshandler"]], "ResourceManager": [[12, "resourcemanager"]], "ResourceURI": [[12, "resourceuri"]], "Developing Kenning blocks": [[13, "developing-kenning-blocks"]], "Model and I/O metadata": [[13, "model-and-i-o-metadata"]], "Implementing a new Kenning component": [[13, "implementing-a-new-kenning-component"]], "Defining arguments for core classes": [[13, "defining-arguments-for-core-classes"]], "Defining supported output and input types": [[13, "defining-supported-output-and-input-types"]], "Implementing unimplemented methods": [[13, "implementing-unimplemented-methods"]], "Using the implemented block": [[13, "using-the-implemented-block"]], "Implementing Kenning runtime blocks": [[13, "implementing-kenning-runtime-blocks"]], "Implementing new Runners for KenningFlow": [[13, "implementing-new-runners-for-kenningflow"]], "Creating applications with Kenning": [[14, "creating-applications-with-kenning"]], "JSON structure": [[14, "json-structure"]], "Runner IO": [[14, "runner-io"]], "IO compatibility": [[14, "io-compatibility"]], "IO non-standard types": [[14, "io-non-standard-types"]], "IO names and mapping": [[14, "io-names-and-mapping"]], "Runtime example": [[14, "runtime-example"]], "KenningFlow execution": [[14, "kenningflow-execution"]], "Implemented Runners": [[14, "implemented-runners"]], "Kenning gallery of use cases": [[15, "kenning-gallery-of-use-cases"]], "Kenning measurements": [[16, "kenning-measurements"]], "Performance metrics": [[16, "performance-metrics"]], "Kenning resources": [[17, "kenning-resources"]], "Accessing resources": [[17, "accessing-resources"]], "Caching": [[17, "caching"]], "Custom URI schemes": [[17, "custom-uri-schemes"]], "CLI commands": [[17, "cli-commands"]], "Kenning environment variables": [[18, "kenning-environment-variables"]], "KENNING_CACHE_DIR": [[18, "kenning-cache-dir"]], "KENNING_MAX_CACHE_SIZE": [[18, "kenning-max-cache-size"]], "KENNING_USE_DEFAULT_EXCEPTHOOK": [[18, "kenning-use-default-excepthook"]], "KENNING_DOCS_VENV": [[18, "kenning-docs-venv"]], "KENNING_ENABLE_ALL_LOGS": [[18, "kenning-enable-all-logs"]], "KENNING_DISABLE_IO_VALIDATION": [[18, "kenning-disable-io-validation"]], "Choosing optimal optimization pipeline": [[19, "choosing-optimal-optimization-pipeline"]], "Optimization config specification": [[19, "optimization-config-specification"]], "Output details": [[19, "output-details"]], "Kenning installation": [[20, "kenning-installation"]], "Module installation with pip": [[20, "module-installation-with-pip"]], "Working directly with the repository": [[20, "working-directly-with-the-repository"]], "Kenning structure": [[20, "kenning-structure"]], "Kenning usage": [[20, "kenning-usage"]], "Running Kenning": [[20, "running-kenning"]], "Kenning tutorials": [[20, "kenning-tutorials"]], "Using Kenning as a library in Python scripts": [[20, "using-kenning-as-a-library-in-python-scripts"]], "Adding new implementations": [[20, "adding-new-implementations"]], "Sample autogenerated report": [[21, "sample-autogenerated-report"]], "Pet Dataset classification using TVM-compiled TensorFlow model": [[21, "pet-dataset-classification-using-tvm-compiled-tensorflow-model"]], "Commands used": [[21, "commands-used"]], "General information for build.local-cpu-tvm-tensorflow-classification.json": [[21, "general-information-for-build-local-cpu-tvm-tensorflow-classification-json"]], "Inference performance metrics for build.local-cpu-tvm-tensorflow-classification.json": [[21, "inference-performance-metrics-for-build-local-cpu-tvm-tensorflow-classification-json"]], "Inference time": [[21, "inference-time"]], "Average CPU usage": [[21, "average-cpu-usage"]], "Memory usage": [[21, "memory-usage"]], "Inference quality metrics for build.local-cpu-tvm-tensorflow-classification.json": [[21, "inference-quality-metrics-for-build-local-cpu-tvm-tensorflow-classification-json"]]}, "indexentries": {"argumentshandler (class in kenning.utils.args_manager)": [[12, "kenning.utils.args_manager.ArgumentsHandler"]], "dataconverter (class in kenning.core.dataconverter)": [[12, "kenning.core.dataconverter.DataConverter"]], "dataprovider (class in kenning.core.dataprovider)": [[12, "kenning.core.dataprovider.DataProvider"]], "dataset (class in kenning.core.dataset)": [[12, "kenning.core.dataset.Dataset"]], "kenningflow (class in kenning.core.flow)": [[12, "kenning.core.flow.KenningFlow"]], "measurements (class in kenning.core.measurements)": [[12, "kenning.core.measurements.Measurements"]], "measurementscollector (class in kenning.core.measurements)": [[12, "kenning.core.measurements.MeasurementsCollector"]], "modelwrapper (class in kenning.core.model)": [[12, "kenning.core.model.ModelWrapper"]], "onnxconversion (class in kenning.core.onnxconversion)": [[12, "kenning.core.onnxconversion.ONNXConversion"]], "optimizer (class in kenning.core.optimizer)": [[12, "kenning.core.optimizer.Optimizer"]], "outputcollector (class in kenning.core.outputcollector)": [[12, "kenning.core.outputcollector.OutputCollector"]], "protocol (class in kenning.core.protocol)": [[12, "kenning.core.protocol.Protocol"]], "resourcemanager (class in kenning.utils.resource_manager)": [[12, "kenning.utils.resource_manager.ResourceManager"]], "resourceuri (class in kenning.utils.resource_manager)": [[12, "kenning.utils.resource_manager.ResourceURI"]], "runner (class in kenning.core.runner)": [[12, "kenning.core.runner.Runner"]], "runtime (class in kenning.core.runtime)": [[12, "kenning.core.runtime.Runtime"]], "systemstatscollector (class in kenning.core.measurements)": [[12, "kenning.core.measurements.SystemStatsCollector"]], "_dataindex (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset._dataindex"]], "accumulate() (kenning.core.measurements.measurements method)": [[12, "kenning.core.measurements.Measurements.accumulate"]], "add_custom_url_schemes() (kenning.utils.resource_manager.resourcemanager method)": [[12, "kenning.utils.resource_manager.ResourceManager.add_custom_url_schemes"]], "add_entry() (kenning.core.onnxconversion.onnxconversion method)": [[12, "kenning.core.onnxconversion.ONNXConversion.add_entry"]], "add_measurement() (kenning.core.measurements.measurements method)": [[12, "kenning.core.measurements.Measurements.add_measurement"]], "batch_size (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset.batch_size"]], "calibration_dataset_generator() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.calibration_dataset_generator"]], "check_conversions() (kenning.core.onnxconversion.onnxconversion method)": [[12, "kenning.core.onnxconversion.ONNXConversion.check_conversions"]], "cleanup() (kenning.core.runner.runner method)": [[12, "kenning.core.runner.Runner.cleanup"]], "clear() (kenning.core.measurements.measurements method)": [[12, "kenning.core.measurements.Measurements.clear"]], "clear() (kenning.core.measurements.measurementscollector class method)": [[12, "kenning.core.measurements.MeasurementsCollector.clear"]], "clear_cache() (kenning.utils.resource_manager.resourcemanager method)": [[12, "kenning.utils.resource_manager.ResourceManager.clear_cache"]], "compile() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.compile"]], "consult_model_type() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.consult_model_type"]], "convert_input_to_bytes() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.convert_input_to_bytes"]], "convert_output_from_bytes() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.convert_output_from_bytes"]], "copy() (kenning.core.measurements.measurements method)": [[12, "kenning.core.measurements.Measurements.copy"]], "data (kenning.core.measurements.measurements attribute)": [[12, "kenning.core.measurements.Measurements.data"]], "datax (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset.dataX"]], "dataxtest (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset.dataXtest"]], "dataxtrain (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset.dataXtrain"]], "dataxval (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset.dataXval"]], "datay (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset.dataY"]], "dataytest (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset.dataYtest"]], "dataytrain (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset.dataYtrain"]], "datayval (kenning.core.dataset.dataset attribute)": [[12, "kenning.core.dataset.Dataset.dataYval"]], "derive_io_spec_from_json_params() (kenning.core.model.modelwrapper class method)": [[12, "kenning.core.model.ModelWrapper.derive_io_spec_from_json_params"]], "detach_from_output() (kenning.core.outputcollector.outputcollector method)": [[12, "kenning.core.outputcollector.OutputCollector.detach_from_output"]], "detach_from_source() (kenning.core.dataprovider.dataprovider method)": [[12, "kenning.core.dataprovider.DataProvider.detach_from_source"]], "disconnect() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.disconnect"]], "download_dataset_fun() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.download_dataset_fun"]], "download_output() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.download_output"]], "download_statistics() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.download_statistics"]], "evaluate() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.evaluate"]], "extract_output() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.extract_output"]], "fetch_input() (kenning.core.dataprovider.dataprovider method)": [[12, "kenning.core.dataprovider.DataProvider.fetch_input"]], "form_argparse() (kenning.utils.args_manager.argumentshandler class method)": [[12, "kenning.utils.args_manager.ArgumentsHandler.form_argparse"]], "form_parameterschema() (kenning.core.flow.kenningflow class method)": [[12, "kenning.core.flow.KenningFlow.form_parameterschema"]], "form_parameterschema() (kenning.utils.args_manager.argumentshandler class method)": [[12, "kenning.utils.args_manager.ArgumentsHandler.form_parameterschema"]], "from_argparse() (kenning.core.dataset.dataset class method)": [[12, "kenning.core.dataset.Dataset.from_argparse"]], "from_argparse() (kenning.core.model.modelwrapper class method)": [[12, "kenning.core.model.ModelWrapper.from_argparse"]], "from_argparse() (kenning.core.optimizer.optimizer class method)": [[12, "kenning.core.optimizer.Optimizer.from_argparse"]], "from_argparse() (kenning.core.protocol.protocol class method)": [[12, "kenning.core.protocol.Protocol.from_argparse"]], "from_argparse() (kenning.core.runner.runner class method)": [[12, "kenning.core.runner.Runner.from_argparse"]], "from_argparse() (kenning.core.runtime.runtime class method)": [[12, "kenning.core.runtime.Runtime.from_argparse"]], "from_argparse() (kenning.utils.args_manager.argumentshandler class method)": [[12, "kenning.utils.args_manager.ArgumentsHandler.from_argparse"]], "from_json() (kenning.core.dataset.dataset class method)": [[12, "kenning.core.dataset.Dataset.from_json"]], "from_json() (kenning.core.flow.kenningflow class method)": [[12, "kenning.core.flow.KenningFlow.from_json"]], "from_json() (kenning.core.model.modelwrapper class method)": [[12, "kenning.core.model.ModelWrapper.from_json"]], "from_json() (kenning.core.optimizer.optimizer class method)": [[12, "kenning.core.optimizer.Optimizer.from_json"]], "from_json() (kenning.core.protocol.protocol class method)": [[12, "kenning.core.protocol.Protocol.from_json"]], "from_json() (kenning.core.runner.runner class method)": [[12, "kenning.core.runner.Runner.from_json"]], "from_json() (kenning.core.runtime.runtime class method)": [[12, "kenning.core.runtime.Runtime.from_json"]], "from_json() (kenning.utils.args_manager.argumentshandler class method)": [[12, "kenning.utils.args_manager.ArgumentsHandler.from_json"]], "gather_data() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.gather_data"]], "get_class_names() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.get_class_names"]], "get_data() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.get_data"]], "get_data_unloaded() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.get_data_unloaded"]], "get_framework_and_version() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.get_framework_and_version"]], "get_framework_and_version() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.get_framework_and_version"]], "get_input_formats() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.get_input_formats"]], "get_input_formats() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.get_input_formats"]], "get_input_mean_std() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.get_input_mean_std"]], "get_input_type() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.get_input_type"]], "get_io_spec_path() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.get_io_spec_path"]], "get_io_specification() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.get_io_specification"]], "get_io_specification_from_model() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.get_io_specification_from_model"]], "get_measurements() (kenning.core.measurements.systemstatscollector method)": [[12, "kenning.core.measurements.SystemStatsCollector.get_measurements"]], "get_output_formats() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.get_output_formats"]], "get_output_formats() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.get_output_formats"]], "get_path() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.get_path"]], "get_resource() (kenning.utils.resource_manager.resourcemanager method)": [[12, "kenning.utils.resource_manager.ResourceManager.get_resource"]], "get_spec_path() (kenning.core.optimizer.optimizer static method)": [[12, "kenning.core.optimizer.Optimizer.get_spec_path"]], "get_time() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.get_time"]], "get_values() (kenning.core.measurements.measurements method)": [[12, "kenning.core.measurements.Measurements.get_values"]], "infer() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.infer"]], "inference_session_end() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.inference_session_end"]], "inference_session_start() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.inference_session_start"]], "initialize_client() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.initialize_client"]], "initialize_measurement() (kenning.core.measurements.measurements method)": [[12, "kenning.core.measurements.Measurements.initialize_measurement"]], "initialize_server() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.initialize_server"]], "iter_test() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.iter_test"]], "iter_train() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.iter_train"]], "iter_val() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.iter_val"]], "kenning.core.measurements": [[12, "module-kenning.core.measurements"]], "list_cached_files() (kenning.utils.resource_manager.resourcemanager method)": [[12, "kenning.utils.resource_manager.ResourceManager.list_cached_files"]], "load_input() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.load_input"]], "load_input_from_bytes() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.load_input_from_bytes"]], "load_io_specification() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.load_io_specification"]], "load_model() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.load_model"]], "module": [[12, "module-kenning.core.measurements"]], "onnx_export() (kenning.core.onnxconversion.onnxconversion method)": [[12, "kenning.core.onnxconversion.ONNXConversion.onnx_export"]], "onnx_import() (kenning.core.onnxconversion.onnxconversion method)": [[12, "kenning.core.onnxconversion.ONNXConversion.onnx_import"]], "origin (kenning.utils.resource_manager.resourceuri property)": [[12, "kenning.utils.resource_manager.ResourceURI.origin"]], "parent (kenning.utils.resource_manager.resourceuri property)": [[12, "kenning.utils.resource_manager.ResourceURI.parent"]], "parse_io_specification_from_json() (kenning.core.model.modelwrapper class method)": [[12, "kenning.core.model.ModelWrapper.parse_io_specification_from_json"]], "postprocess_outputs() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.postprocess_outputs"]], "prepare() (kenning.core.dataprovider.dataprovider method)": [[12, "kenning.core.dataprovider.DataProvider.prepare"]], "prepare() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.prepare"]], "prepare() (kenning.core.onnxconversion.onnxconversion method)": [[12, "kenning.core.onnxconversion.ONNXConversion.prepare"]], "prepare_external_calibration_dataset() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.prepare_external_calibration_dataset"]], "prepare_input_samples() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.prepare_input_samples"]], "prepare_io_specification() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.prepare_io_specification"]], "prepare_local() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.prepare_local"]], "prepare_model() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.prepare_model"]], "prepare_model() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.prepare_model"]], "prepare_output_samples() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.prepare_output_samples"]], "preprocess_input() (kenning.core.dataprovider.dataprovider method)": [[12, "kenning.core.dataprovider.DataProvider.preprocess_input"]], "preprocess_input() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.preprocess_input"]], "preprocess_model_to_upload() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.preprocess_model_to_upload"]], "process_output() (kenning.core.outputcollector.outputcollector method)": [[12, "kenning.core.outputcollector.OutputCollector.process_output"]], "read_io_specification() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.read_io_specification"]], "receive_confirmation() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.receive_confirmation"]], "receive_data() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.receive_data"]], "receive_message() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.receive_message"]], "request_failure() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.request_failure"]], "request_optimization() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.request_optimization"]], "request_processing() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.request_processing"]], "request_success() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.request_success"]], "run() (kenning.core.flow.kenningflow method)": [[12, "kenning.core.flow.KenningFlow.run"]], "run() (kenning.core.measurements.systemstatscollector method)": [[12, "kenning.core.measurements.SystemStatsCollector.run"]], "run() (kenning.core.runner.runner method)": [[12, "kenning.core.runner.Runner.run"]], "run() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.run"]], "run_inference() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.run_inference"]], "run_single_step() (kenning.core.flow.kenningflow method)": [[12, "kenning.core.flow.KenningFlow.run_single_step"]], "save_dataset_checksum() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.save_dataset_checksum"]], "save_io_specification() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.save_io_specification"]], "save_measurements() (kenning.core.measurements.measurementscollector class method)": [[12, "kenning.core.measurements.MeasurementsCollector.save_measurements"]], "save_model() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.save_model"]], "save_to_onnx() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.save_to_onnx"]], "send_data() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.send_data"]], "send_message() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.send_message"]], "set_batch_size() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.set_batch_size"]], "set_cache_dir() (kenning.utils.resource_manager.resourcemanager method)": [[12, "kenning.utils.resource_manager.ResourceManager.set_cache_dir"]], "set_compiled_model_path() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.set_compiled_model_path"]], "set_input_type() (kenning.core.optimizer.optimizer method)": [[12, "kenning.core.optimizer.Optimizer.set_input_type"]], "set_max_cache_size() (kenning.utils.resource_manager.resourcemanager method)": [[12, "kenning.utils.resource_manager.ResourceManager.set_max_cache_size"]], "should_close() (kenning.core.outputcollector.outputcollector method)": [[12, "kenning.core.outputcollector.OutputCollector.should_close"]], "should_close() (kenning.core.runner.runner method)": [[12, "kenning.core.runner.Runner.should_close"]], "systemstatsmeasurements() (in module kenning.core.measurements)": [[12, "kenning.core.measurements.systemstatsmeasurements"]], "tagmeasurements() (in module kenning.core.measurements)": [[12, "kenning.core.measurements.tagmeasurements"]], "test_inference() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.test_inference"]], "test_subset_len() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.test_subset_len"]], "timemeasurements() (in module kenning.core.measurements)": [[12, "kenning.core.measurements.timemeasurements"]], "to_json() (kenning.utils.args_manager.argumentshandler method)": [[12, "kenning.utils.args_manager.ArgumentsHandler.to_json"]], "to_next_block() (kenning.core.dataconverter.dataconverter method)": [[12, "kenning.core.dataconverter.DataConverter.to_next_block"]], "to_previous_block() (kenning.core.dataconverter.dataconverter method)": [[12, "kenning.core.dataconverter.DataConverter.to_previous_block"]], "train_model() (kenning.core.model.modelwrapper method)": [[12, "kenning.core.model.ModelWrapper.train_model"]], "train_subset_len() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.train_subset_len"]], "train_test_split_representations() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.train_test_split_representations"]], "update_measurements() (kenning.core.measurements.measurements method)": [[12, "kenning.core.measurements.Measurements.update_measurements"]], "upload_input() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.upload_input"]], "upload_io_specification() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.upload_io_specification"]], "upload_model() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.upload_model"]], "upload_optimizers() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.upload_optimizers"]], "upload_output() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.upload_output"]], "upload_runtime() (kenning.core.protocol.protocol method)": [[12, "kenning.core.protocol.Protocol.upload_runtime"]], "upload_stats() (kenning.core.runtime.runtime method)": [[12, "kenning.core.runtime.Runtime.upload_stats"]], "uri (kenning.utils.resource_manager.resourceuri property)": [[12, "kenning.utils.resource_manager.ResourceURI.uri"]], "val_subset_len() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.val_subset_len"]], "validate_resources_version() (kenning.utils.resource_manager.resourcemanager method)": [[12, "kenning.utils.resource_manager.ResourceManager.validate_resources_version"]], "verify_dataset_checksum() (kenning.core.dataset.dataset method)": [[12, "kenning.core.dataset.Dataset.verify_dataset_checksum"]], "with_name() (kenning.utils.resource_manager.resourceuri method)": [[12, "kenning.utils.resource_manager.ResourceURI.with_name"]], "with_stem() (kenning.utils.resource_manager.resourceuri method)": [[12, "kenning.utils.resource_manager.ResourceURI.with_stem"]], "with_suffix() (kenning.utils.resource_manager.resourceuri method)": [[12, "kenning.utils.resource_manager.ResourceURI.with_suffix"]]}, "docurls": ["cmd-usage.html", "dl-deployment-stack.html", "gallery/displaying-information-example.html", "gallery/kenning-zephyr-runtime.html", "gallery/pipeline-manager-example.html", "gallery/renode-integration-example.html", "gallery/structured-pruning-torch.html", "gallery/tflite-tvm.html", "gallery/unstructured-pruning-tensorflow.html", "index.html", "introduction.html", "json-scenarios.html", "kenning-api.html", "kenning-development.html", "kenning-flow.html", "kenning-gallery.html", "kenning-measurements.html", "kenning-resources.html", "kenning-variables.html", "pipeline-optimizer.html", "project-readme.html", "sample-report.html"]})